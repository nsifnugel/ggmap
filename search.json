[{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/ISSUE_TEMPLATE.html","id":"reproducible-example","dir":"","previous_headings":"","what":"Reproducible Example","title":"NA","text":"Feel free delete replace description feature ’d like bug. Paste reprex . helps maintainers reproduce bug encountered. Ensure si option TRUE. Example:","code":"reprex::reprex({     library(ggmap)     ggmap(get_map()) }, si = TRUE)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/PULL_REQUEST_TEMPLATE.html","id":"before-you-open-your-pr","dir":"","previous_headings":"","what":"Before you open your PR","title":"NA","text":"run R CMD CHECK? run roxygen2::roxygenise(\".\")? Thanks contributing!","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/articles/Example_Analysis.html","id":"overview","dir":"Articles","previous_headings":"US Tornado Trends","what":"Overview","title":"Example Analysis","text":"vignette utilizes data TidyTuesday explore capabilities ggmap package. data set, named tornadoes, originally comes NOAA National Weather Service Storm Prediction Center hosts information US tornadoes since 1950. included variables magnitude, state, year, starting ending coordinates. Check data dictionary see . data set ggmap package, sought answer following questions: frequency distribution tornadoes 2022 compare 1950? distance traveled tornado relate magnitude year?","code":"library(ggmap) library(here) library(tidyverse) if (!dir.exists(here(\"data\"))) {   dir.create(here(\"data\")) } if (any(!file.exists(here(\"data\", \"tornadoes.RDS\")))) {   tornadoes <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-16/tornados.csv')   saveRDS(tornadoes, file = here(\"data\",\"tornadoes.RDS\")) } else {tornadoes <- readRDS(here(\"data\",\"tornadoes.RDS\")) }"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/articles/Example_Analysis.html","id":"distribution-of-tornadoes-1950-vs--2022","dir":"Articles","previous_headings":"US Tornado Trends","what":"Distribution of Tornadoes 1950 vs. 2022","title":"Example Analysis","text":"NOTE! Spatial data ggmap obtained GoogleMaps StadiaMaps (depending “source” choose), require API key. generating map using map related data, must register key. API keys private stored securely. Read recommendations protect keys .Renviron file.","code":"ggmap::register_google(\"Your API Key\")  US_map <- ggmap::get_map(location='united states', zoom=4, maptype = \"terrain\",                   source='google',color='color')  tornadoes1950_2022 <-tornadoes %>%   filter(year(date) %in% c(1950,2022))  ggmap::ggmap(US_map) +   geom_point(     aes(x=slon, y=slat),     data=tornadoes1950_2022, alpha=.5, na.rm = T)  +   scale_color_gradient(low=\"beige\", high=\"blue\") +   facet_wrap(\"yr\") +   labs(x = \"Longitude\",        y = \"Latitude\",        title = \"Distribution of Tornadoes in the US in 1950 and 2022\",        subtitle = \"There were more tornadoes in 2022 compared to 1950, particualrly in the South.\",        caption = \"Source: NOAA National Weather Service Storm Prediction Center\")"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/articles/Example_Analysis.html","id":"frequency-of-tornadoes-1950-vs--2022","dir":"Articles","previous_headings":"US Tornado Trends","what":"Frequency of Tornadoes 1950 vs. 2022","title":"Example Analysis","text":"","code":"tornadoes %>%   filter(year(date) %in% c(1950,2022)) %>%   group_by(yr,st) %>%   summarize(total = n()) %>%   nest(data = c(st, total)) %>%   mutate(data = map(data, ~ arrange(.x, desc(total)))) %>%   unnest(cols=c(yr,data)) %>%   group_by(yr) %>%   mutate(st = factor(st),          st = fct_reorder(st,total)) %>%   slice(1:5) %>%   ggplot(aes(st, total, fill = yr)) +   geom_bar(stat=\"identity\") +   facet_wrap(\"yr\", scales = \"free_x\") +   theme(legend.position = \"none\") +   labs(x=\"State\",        y = \"Number of Tornadoes\",        title = \"States with the Highest Number of Tornadoes in 1950 and 2022\",        subtitle = \"MS and TX are tornado hotspots and the total number of tornadoes within top tornado states\\nhas increased dramatically since 1950.\",        caption = \"Source: NOAA National Weather Service Storm Prediction Center\") #> `summarise()` has grouped output by 'yr'. You can override using the `.groups` #> argument."},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/articles/Example_Analysis.html","id":"relationships-between-distance-traveled-by-tornado-magnitude-and-year","dir":"Articles","previous_headings":"US Tornado Trends","what":"Relationships between Distance Traveled by Tornado, Magnitude, and Year","title":"Example Analysis","text":"","code":"set.seed(123832)  distance_covered_loss <- tornadoes %>%   select(om,yr,st,slat,slon,elat,elon,loss,mag) %>%   filter(if_all(slat:elon) != 0) %>%   drop_na() %>%   slice_sample(n=150) %>%   mutate(from = map2(slon,slat,~c(.x,.y)),          to = map2(elon,elat,~c(.x,.y))) %>%   mutate(distance = map2(from,to,~ggmap::mapdist(.x,.y, output=\"simple\"))) %>%   select(-c(from,to)) %>%   unnest() %>%   distinct()  distance_covered_loss %>%   select(yr,miles,mag) %>%   rename(Year = yr, Magnitude = mag) %>%    pivot_longer(-miles, names_to = \"covariate\") %>%   group_by(covariate,value) %>%   summarize(average_distance = mean(miles, na.rm = TRUE)) %>%    ggplot(aes(value,average_distance)) +   geom_point() +   geom_smooth(method=\"lm\", se=FALSE) +   facet_wrap(\"covariate\", scales=\"free\",strip.position = \"bottom\") +   labs(y = \"Average Distance Traveled (miles)\",        title = \"Average Distance Tornadoes Traveled by Magnitude and Year\",        subtitle = \"Distance tends to increase with magnitude and distance has slightly decreased over time.\",        caption = \"Source: NOAA National Weather Service Storm Prediction Center\") +   theme(strip.placement = \"outside\",                              strip.background = element_rect(fill = \"white\"),           axis.title.x = element_blank())"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/articles/Example_Analysis.html","id":"summary","dir":"Articles","previous_headings":"US Tornado Trends","what":"Summary","title":"Example Analysis","text":"Overall, analysis revealed tornadoes US 2022 1950, substantial increase frequency South. Among states tornadoes, total number tornadoes occurring 2022 much greater number tornadoes occurring 1950. difference 90 tornadoes per year Texas alone. Lastly, analysis showed seems positive linear relationship distance traveled tornado magnitude weakly negative relationship distance traveled year.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/articles/Example_Analysis.html","id":"functions","dir":"Articles","previous_headings":"US Tornado Trends","what":"Functions","title":"Example Analysis","text":"ggmap: register_google(), get_map(), ggmap(), mapdist() dplyr: group_by(), summarize(), filter(), select(), rename(), slice(), nest(), mutate() ggplot: geom_point(), geom_bar(), geom_smooth() purrr: map(), map2()","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Kahle. Author, maintainer. Hadley Wickham. Author. Scott Jackson. Author. Mikko Korpela. Contributor.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"D. Kahle H. Wickham. ggmap: Spatial Visualization ggplot2. R Journal, 5(1), 144-161. URL http://journal.r-project.org/archive/2013-1/kahle-wickham.pdf","code":"@Article{,   author = {David Kahle and Hadley Wickham},   title = {ggmap: Spatial Visualization with ggplot2},   journal = {The R Journal},   year = {2013},   volume = {5},   number = {1},   pages = {144--161},   url = {https://journal.r-project.org/archive/2013-1/kahle-wickham.pdf}, }"},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/index.html","id":"important-information","dir":"","previous_headings":"","what":"Important Information","title":"Spatial Visualization with ggplot2","text":"website created Natalia Sifnugel JHSPH Biostat777 Project 3. Link Original GitHub Repository Package: https://github.com/dkahle/ggmap Link Deployed Website: https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/index.html Customized Website Elements: Bootswatch Theme Restructured Sidebar Restructured Footer Changed Fonts Header, Base, Code Text Customized Navbar Color Original Package Author(s) David Kahle [aut, cre] Hadley Wickham [aut] Scott Jackson [aut] Mikko Korpela [ctb] Natalia Sifnugel [website] many functions included package, can found reference tab site!","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/index.html","id":"goal","dir":"","previous_headings":"","what":"Goal","title":"Spatial Visualization with ggplot2","text":"ggmap R package makes easy retrieve raster map tiles popular online mapping services like Google Maps, Stadia Maps, OpenStreetMap, plot using ggplot2 framework.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/index.html","id":"stadia-maps","dir":"","previous_headings":"","what":"Stadia Maps","title":"Spatial Visualization with ggplot2","text":"Stadia Maps offers map tiles several styles, including updated tiles Stamen Design. API key required, credit card necessary sign free tier non-commercial use. API key, invoke registration function: register_stadiamaps(\"-API-KEY\", write = FALSE). Note setting write = TRUE update ~/.Renviron file replacing/adding relevant line. use former, know ’ll need re-every time reset R. API key private unique , careful share online, example GitHub issue saving shared R script file. share inadvertently, just go client.stadiamaps.com, delete API key, create new one.  Use qmplot() way ’d use qplot(), map automatically added background:  Often qmplot() easiest automatically computes nice bounding box without pre-compute , get map, use ggmap(map) place ordinarily (ggplot2 formulation) use ggplot(). Nevertheless, efficient. workflow get map first (can visualize ggmap()):  layer geoms/stats ggplot2. difference (1) need specify data arguments layers (2) spatial aesthetics x y set lon lat, respectively. (’re named something different dataset, just put mapping = aes(x = longitude, y = latitude)), example.)  ggmap ’re working ggplot2, can add kinds layers, use patchwork, etc. ggplot2 geom’s available. example, can make contour plot geom = \"density2d\":  Faceting works, :","code":"library(\"ggmap\") #  Loading required package: ggplot2 #  ℹ Google's Terms of Service: <https://mapsplatform.google.com> #    Stadia Maps' Terms of Service: <https://stadiamaps.com/terms-of-service/> #    OpenStreetMap's Tile Usage Policy: <https://operations.osmfoundation.org/policies/tiles/> #  ℹ Please cite ggmap if you use it! Use `citation(\"ggmap\")` for details.  us <- c(left = -125, bottom = 25.75, right = -67, top = 49) get_stadiamap(us, zoom = 5, maptype = \"alidade_smooth\") |> ggmap()  #  ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors. library(\"dplyr\", warn.conflicts = FALSE) library(\"forcats\")  # define helper `%notin%` <- function(lhs, rhs) !(lhs %in% rhs)  # reduce crime to violent crimes in downtown houston violent_crimes <- crime |>    filter(     offense %notin% c(\"auto theft\", \"theft\", \"burglary\"),     between(lon, -95.39681, -95.34188),     between(lat, 29.73631, 29.78400)   ) |>    mutate(     offense = fct_drop(offense),     offense = fct_relevel(offense, c(\"robbery\", \"aggravated assault\", \"rape\", \"murder\"))   )  # use qmplot to make a scatterplot on a map qmplot(lon, lat, data = violent_crimes, maptype = \"stamen_toner_lite\", color = I(\"red\")) #  ℹ Using `zoom = 14` #  ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors. bbox <- make_bbox(lon, lat, data = violent_crimes) map <- get_stadiamap( bbox = bbox, maptype = \"stamen_toner_lite\", zoom = 14 ) #  ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors. ggmap(map) ggmap(map) +   geom_point(data = violent_crimes, color = \"red\") library(\"patchwork\") library(\"ggdensity\")  robberies <- violent_crimes |> filter(offense == \"robbery\")  points_map <- ggmap(map) + geom_point(data = robberies, color = \"red\")  # warnings disabled hdr_map <- ggmap(map) +    geom_hdr(     aes(lon, lat, fill = after_stat(probs)), data = robberies,     alpha = .5   ) +   geomtextpath::geom_labeldensity2d(     aes(lon, lat, level = after_stat(probs)),     data = robberies, stat = \"hdr_lines\", size = 3, boxcolour = NA   ) +   scale_fill_brewer(palette = \"YlOrRd\") +   theme(legend.position = \"none\")  (points_map + hdr_map) &    theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank()) ggmap(map, darken = .3) +   geom_point(     aes(lon, lat), data = violent_crimes,      shape = 21, color = \"gray25\", fill = \"yellow\"   ) +   facet_wrap(~ offense, nrow = 1) +   theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank())"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/index.html","id":"google-maps","dir":"","previous_headings":"","what":"Google Maps","title":"Spatial Visualization with ggplot2","text":"Google Maps can used just easily. However, since Google Maps use center/zoom specification, input bit different:  Moreover, can get various different styles Google Maps ggmap (just like Stadia Maps): Google’s geocoding reverse geocoding API’s available geocode() revgeocode(), respectively: Note: geocode() uses Google’s Geocoding API geocode addresses. Please take care disclose sensitive information. Rundle, Bader, Moody (2022) considered issue suggest various alternative options data. also mutate_geocode() works similarly dplyr’s mutate() function: Treks use Google’s routing API give routes (route() trek() give slightly different results; latter hugs roads):  (also provide information long takes get point point B.) Map distances, length anticipated time, can computed mapdist()). Moreover function vectorized:","code":"(map <- get_googlemap(\"waco texas\", zoom = 12)) #  ℹ <https://maps.googleapis.com/maps/api/staticmap?center=waco%20texas&zoom=12&size=640x640&scale=2&maptype=terrain&key=xxx> #  ℹ <https://maps.googleapis.com/maps/api/geocode/json?address=waco+texas&key=xxx> #  1280x1280 terrain map image from Google Maps; use `ggmap::ggmap()` to plot it. ggmap(map) get_googlemap(\"waco texas\", zoom = 12, maptype = \"satellite\") |> ggmap() get_googlemap(\"waco texas\", zoom = 12, maptype = \"hybrid\") |> ggmap() get_googlemap(\"waco texas\", zoom = 12, maptype = \"roadmap\") |> ggmap() geocode(\"1301 S University Parks Dr, Waco, TX 76798\") #  ℹ <https://maps.googleapis.com/maps/api/geocode/json?address=1301+S+University+Parks+Dr,+Waco,+TX+76798&key=xxx> #  # A tibble: 1 × 2 #      lon   lat #    <dbl> <dbl> #  1 -97.1  31.6 revgeocode(c(lon = -97.1161, lat = 31.55098)) #  ℹ <https://maps.googleapis.com/maps/api/geocode/json?latlng=31.55098,-97.1161&key=xxx> #  Warning: Multiple addresses found, the first will be returned: #  !   1301 S University Parks Dr, Waco, TX 76706, USA #  !   55 Baylor Ave, Waco, TX 76706, USA #  !   HV2M+9H Waco, TX, USA #  !   Bear Trail, Waco, TX 76706, USA #  !   Robinson, TX 76706, USA #  !   Waco, TX, USA #  !   McLennan County, TX, USA #  !   Texas, USA #  !   United States #  [1] \"1301 S University Parks Dr, Waco, TX 76706, USA\" tibble(address = c(\"white house\", \"\", \"waco texas\")) |>    mutate_geocode(address) #  ℹ <https://maps.googleapis.com/maps/api/geocode/json?address=white+house&key=xxx> #  ℹ <https://maps.googleapis.com/maps/api/geocode/json?address=waco+texas&key=xxx> #  # A tibble: 3 × 3 #    address         lon   lat #    <chr>         <dbl> <dbl> #  1 \"white house\" -77.0  38.9 #  2 \"\"             NA    NA   #  3 \"waco texas\"  -97.1  31.5 trek_df <- trek(\"houson, texas\", \"waco, texas\", structure = \"route\") #  ℹ <https://maps.googleapis.com/maps/api/directions/json?origin=houson,+texas&destination=waco,+texas&key=xxx&mode=driving&alternatives=false&units=metric> qmap(\"college station, texas\", zoom = 8) +   geom_path(     aes(x = lon, y = lat),  colour = \"blue\",     size = 1.5, alpha = .5,     data = trek_df, lineend = \"round\"   ) #  ℹ <https://maps.googleapis.com/maps/api/staticmap?center=college%20station,%20texas&zoom=8&size=640x640&scale=2&maptype=terrain&language=en-EN&key=xxx> #  ℹ <https://maps.googleapis.com/maps/api/geocode/json?address=college+station,+texas&key=xxx> #  Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #  ℹ Please use `linewidth` instead. #  This warning is displayed once every 8 hours. #  Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #  generated. mapdist(c(\"houston, texas\", \"dallas\"), \"waco, texas\") #  ℹ <https://maps.googleapis.com/maps/api/distancematrix/json?origins=dallas&destinations=waco,+texas&key=xxx&mode=driving> #  ℹ <https://maps.googleapis.com/maps/api/distancematrix/json?origins=houston,+texas&destinations=waco,+texas&key=xxx&mode=driving> #  # A tibble: 2 × 9 #    from           to               m    km miles seconds minutes hours mode    #    <chr>          <chr>        <int> <dbl> <dbl>   <int>   <dbl> <dbl> <chr>   #  1 dallas         waco, texas 155265  155.  96.5    5303    88.4  1.47 driving #  2 houston, texas waco, texas 298224  298. 185.    10217   170.   2.84 driving"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/index.html","id":"google-maps-api-key","dir":"","previous_headings":"","what":"Google Maps API key","title":"Spatial Visualization with ggplot2","text":"years ago Google changed API requirements, ggmap users now required register Google. user’s perspective, essentially three ramifications : Users must register Google. can https://mapsplatform.google.com. require valid credit card (sorry!), seems fair bit free use incur charges, even charges modest light use. Users must enable APIs intend use. may appear ggmap users one overarching “Google Maps” product, Google fact several services provides geo-related solutions. example, Maps Static API provides map images, Geocoding API provides geocoding reverse geocoding services. Apart relevant Terms Service, generally ggmap users don’t need think different services. example, just need remember get_googlemap() gets maps, geocode() geocodes (Google, DSK done), etc., ggmap handles queries . However, need enable APIs use . ’ll need , ’ll ready use. Enabling APIs just means clicking radio buttons Google Maps Platform web interface listed , ’s easy. Inside R, loading new version ggmap, ’ll need provide ggmap API key, hash value (think string jibberish) authenticates Google’s servers. can done temporary basis register_google(key = \"[key]\") permanently using register_google(key = \"[key]\", write = TRUE) (note: overwrite ~/.Renviron file replacing/adding relevant line). use former, know ’ll need re-every time reset R. API key private unique , careful share online, example GitHub issue saving shared R script file. share inadvertantly, just get Google’s website regenerate key - retire old one. Keeping key private made bit easier ggmap scrubbing key queries default, URLs shown console, ’ll look something like key=xxx. (Read details section register_google() documentation bit info point.) new version ggmap now CRAN soon, can install latest version, including important bug fix mapdist(), :","code":"if(!requireNamespace(\"devtools\")) install.packages(\"devtools\") devtools::install_github(\"dkahle/ggmap\")"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatial Visualization with ggplot2","text":"CRAN: install.packages(\"ggmap\") Github:","code":"if (!requireNamespace(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"dkahle/ggmap\")"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/LonLat2XY.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a lon/lat coordinate to a tile coordinate — LonLat2XY","title":"Convert a lon/lat coordinate to a tile coordinate — LonLat2XY","text":"Convert lon/lat coordinate tile coordinate given zoom.  Decimal tile coordinates (x, y) reported.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/LonLat2XY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a lon/lat coordinate to a tile coordinate — LonLat2XY","text":"","code":"LonLat2XY(lon_deg, lat_deg, zoom, xpix = 256, ypix = 256)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/LonLat2XY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a lon/lat coordinate to a tile coordinate — LonLat2XY","text":"lon_deg longitude degrees lat_deg latitude degrees zoom zoom xpix width tile pixels ypix length tile pixels","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/LonLat2XY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a lon/lat coordinate to a tile coordinate — LonLat2XY","text":"data frame columns X, Y, x, y","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/LonLat2XY.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a lon/lat coordinate to a tile coordinate — LonLat2XY","text":"David Kahle david@kahle.io, based RgoogleMaps::LatLon2XY() Markus Loecher Sense Networks markus@sensenetworks.com","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/LonLat2XY.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a lon/lat coordinate to a tile coordinate — LonLat2XY","text":"","code":"if (FALSE) { gc <- geocode('baylor university') LonLat2XY(gc$lon, gc$lat, 10)  }"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/OSM_scale_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Look up OpenStreetMap scale for a given zoom level. — OSM_scale_lookup","title":"Look up OpenStreetMap scale for a given zoom level. — OSM_scale_lookup","text":"Look OpenStreetMap scale given zoom level.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/OSM_scale_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Look up OpenStreetMap scale for a given zoom level. — OSM_scale_lookup","text":"","code":"OSM_scale_lookup(zoom = 10)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/OSM_scale_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Look up OpenStreetMap scale for a given zoom level. — OSM_scale_lookup","text":"zoom google zoom","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/OSM_scale_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Look up OpenStreetMap scale for a given zoom level. — OSM_scale_lookup","text":"scale","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/OSM_scale_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Look up OpenStreetMap scale for a given zoom level. — OSM_scale_lookup","text":"calculation appropriate OSM scale value given zoom level complicated task.  details, see https://wiki.openstreetmap.org/wiki/FAQ","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/OSM_scale_lookup.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Look up OpenStreetMap scale for a given zoom level. — OSM_scale_lookup","text":"David Kahle david@kahle.io","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/OSM_scale_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Look up OpenStreetMap scale for a given zoom level. — OSM_scale_lookup","text":"","code":"OSM_scale_lookup(zoom = 3) #> [1] 47500000 OSM_scale_lookup(zoom = 10) #> [1] 575000  if (FALSE) { # these can take a long time or are prone to crashing # if the osm server load is too high  # these maps are were the ones used to tailor fit the scale # the zooms were fixed ggmap(get_map(zoom =  3, source = 'osm', scale = 47500000), extent = \"device\") ggmap(get_map(zoom =  4, source = 'osm', scale = 32500000), extent = \"device\") ggmap(get_map(zoom =  5, source = 'osm', scale = 15000000), extent = \"device\") ggmap(get_map(zoom =  6, source = 'osm', scale = 10000000), extent = \"device\") ggmap(get_map(zoom =  7, source = 'osm', scale =  5000000), extent = \"device\") ggmap(get_map(zoom =  8, source = 'osm', scale =  2800000), extent = \"device\") ggmap(get_map(zoom =  9, source = 'osm', scale =  1200000), extent = \"device\") ggmap(get_map(zoom = 10, source = 'osm', scale =   575000), extent = \"device\") ggmap(get_map(zoom = 11, source = 'osm', scale =   220000), extent = \"device\") ggmap(get_map(zoom = 12, source = 'osm', scale =   110000), extent = \"device\") ggmap(get_map(zoom = 13, source = 'osm', scale =    70000), extent = \"device\") ggmap(get_map(zoom = 14, source = 'osm', scale =    31000), extent = \"device\") ggmap(get_map(zoom = 15, source = 'osm', scale =    15000), extent = \"device\") ggmap(get_map(zoom = 16, source = 'osm', scale =     7500), extent = \"device\") ggmap(get_map(zoom = 17, source = 'osm', scale =     4000), extent = \"device\") ggmap(get_map(zoom = 18, source = 'osm', scale =     2500), extent = \"device\") ggmap(get_map(zoom = 19, source = 'osm', scale =     1750), extent = \"device\") ggmap(get_map(zoom = 20, source = 'osm', scale =     1000), extent = \"device\")  # the USA lonR <- c(1.01,.99)*c(-124.73,-66.95) latR <- c(.99,1.01)*c(24.52, 49.38) qmap(lonR = lonR, latR = latR, source = 'osm', scale = 325E5)  }"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/XY2LonLat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a tile coordinate to a lon/lat coordinate — XY2LonLat","title":"Convert a tile coordinate to a lon/lat coordinate — XY2LonLat","text":"Convert tile coordinate lon/lat coordinate given zoom.  Decimal tile coordinates accepted.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/XY2LonLat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a tile coordinate to a lon/lat coordinate — XY2LonLat","text":"","code":"XY2LonLat(X, Y, zoom, x = 0, y = 0, xpix = 255, ypix = 255)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/XY2LonLat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a tile coordinate to a lon/lat coordinate — XY2LonLat","text":"X horizontal map-tile coordinate (0 map-left) Y vertical map-tile coordinate (0 map-top) zoom zoom x within tile x (0 tile-left) y within tile y (0 tile-top) xpix width tile pixels ypix length tile pixels","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/XY2LonLat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a tile coordinate to a lon/lat coordinate — XY2LonLat","text":"data frame columns lon lat (degrees)","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/XY2LonLat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a tile coordinate to a lon/lat coordinate — XY2LonLat","text":"David Kahle david@kahle.io, based RgoogleMaps::XY2LatLon() Markus Loecher Sense Networks markus@sensenetworks.com","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/XY2LonLat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a tile coordinate to a lon/lat coordinate — XY2LonLat","text":"","code":"if (FALSE) { XY2LonLat(480, 845, zoom = 11) XY2LonLat(0, 0, zoom = 1) XY2LonLat(0, 0, 255, 255, zoom = 1) XY2LonLat(0, 0, 255, 255, zoom = 1)  }"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/bb2bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a bb specification to a bbox specification — bb2bbox","title":"Convert a bb specification to a bbox specification — bb2bbox","text":"ggmap, maps (class ggmap) bb attribute, data frame bounding box specification terms bottom left top right points spatial extent. function converts specification named double vector (names left, bottom, right, top) specification used querying functions (e.g. get_stadiamap).","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/bb2bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a bb specification to a bbox specification — bb2bbox","text":"","code":"bb2bbox(bb)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/bb2bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a bb specification to a bbox specification — bb2bbox","text":"bb bounding box bb format (see examples)","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/bb2bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a bb specification to a bbox specification — bb2bbox","text":"bounding box bbox format (see examples)","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/bb2bbox.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a bb specification to a bbox specification — bb2bbox","text":"David Kahle david@kahle.io","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/bb2bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a bb specification to a bbox specification — bb2bbox","text":"","code":"if (FALSE) # cut down on R CMD check time  # grab a center/zoom map and compute its bounding box gc <- geocode(\"white house, washington dc\") map <- get_map(gc) #> Error in get_map(gc): `location` improperly specified, see `ggmap::get_map()`. (bb <- attr(map, \"bb\")) #> Error in eval(expr, envir, enclos): object 'map' not found (bbox <- bb2bbox(bb)) #> Error in eval(expr, envir, enclos): object 'bb' not found  # use the bounding box to get a Stadia map stadMap <- get_stadiamap(bbox) #> Error in eval(expr, envir, enclos): object 'bbox' not found  ggmap(map) +   geom_point(     aes(x = lon, y = lat),     data = gc, colour = \"red\", size = 3   ) #> Error in eval(expr, envir, enclos): object 'map' not found  ggmap(stadMap) +   geom_point(     aes(x = lon, y = lat),     data = gc, colour = \"red\", size = 3   ) #> Error in eval(expr, envir, enclos): object 'stadMap' not found"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/calc_zoom.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a zoom given a bounding box — calc_zoom","title":"Calculate a zoom given a bounding box — calc_zoom","text":"calc_zoom can calculate zoom based either (1) data frame longitude latitude variables, (2) longitude range latitude range, (3) bounding box (bbox specification). specification (1) identical R functions, (2) simply put longitude range lon latitude range lat, (3) put bounding box lon argument.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/calc_zoom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a zoom given a bounding box — calc_zoom","text":"","code":"calc_zoom(lon, lat, data, adjust = 0, f = 0.05)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/calc_zoom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a zoom given a bounding box — calc_zoom","text":"lon longitude, see details lat latitude, see details data (optional) data frame containing lon lat variables adjust number add calculated zoom f argument pass make_bbox","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/calc_zoom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a zoom given a bounding box — calc_zoom","text":"","code":"# From data calc_zoom(lon, lat, wind) #> Error in eval(expr, envir, enclos): object 'wind' not found  # From range lon_range <- extendrange( wind$lon ) #> Error in eval(expr, envir, enclos): object 'wind' not found lat_range <- extendrange( wind$lat ) #> Error in eval(expr, envir, enclos): object 'wind' not found calc_zoom(lon_range, lat_range) #> Error in eval(expr, envir, enclos): object 'lon_range' not found  # From bounding box box <- make_bbox(lon, lat, data = crime) #> Error in eval(expr, envir, enclos): object 'crime' not found calc_zoom(box) #> Error in calc_zoom(box): if specifying a bounding box, the format should match that of make_bbox."},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/crime.html","id":null,"dir":"Reference","previous_headings":"","what":"Crime data — crime","title":"Crime data — crime","text":"Lightly cleaned Houston crime January 2010 August 2010 geocoded Google Maps","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/crime.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Crime data — crime","text":"https://www.houstontx.gov/police/cs/index-2.htm","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/crime.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Crime data — crime","text":"Houston Police Department, City Houston","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/file_drawer.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage the ggmap file drawer. — file_drawer","title":"Manage the ggmap file drawer. — file_drawer","text":"avoid downloading maps , ggmap uses \"file drawer\" store maps downloaded. default, stored session specific temporary directory deleted time quit R. want persist across sessions, set global option \"ggmap.file_drawer\".","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/file_drawer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage the ggmap file drawer. — file_drawer","text":"","code":"file_drawer(...)"},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/geocode.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocode — geocode","title":"Geocode — geocode","text":"Geocodes (finds latitude longitude ) location using Google Geocoding API. Note: use Google's Geocoding API, must first enable API Google Cloud Platform Console. See register_google().","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/geocode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocode — geocode","text":"","code":"geocode(   location,   output = c(\"latlon\", \"latlona\", \"more\", \"all\"),   source = c(\"google\", \"dsk\"),   force = ifelse(source == \"dsk\", FALSE, TRUE),   urlonly = FALSE,   override_limit = FALSE,   nameType = c(\"long\", \"short\"),   ext = \"com\",   inject = \"\",   ... )  mutate_geocode(data, location, ...)  geocodeQueryCheck()  geocode_cache()  write_geocode_cache(path, ...)  load_geocode_cache(path, overwrite = FALSE)  clear_geocode_cache(path)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/geocode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocode — geocode","text":"location character vector street addresses place names (e.g. \"1600 pennsylvania avenue, washington dc\" \"Baylor University\") output amount output, \"latlon\", \"latlona\", \"\", \"\" source \"google\" Google (note: \"dsk\" defunct) force force online query even cached. urlonly return url? override_limit override current query rate nameType cases, Google returns long name short name. parameter allows user specify grab. ext top level domain (e.g. \"com\", \"co.nz\"); helpful non-US users inject character string add url named character vector key-value pairs injected (e.g. c(\"\" = \"b\") get converted \"=b\" appended query) ... mutate_geocode(), arguments pass geocode(). write_geocode_cache(), arguments pass saveRDS(). data data frame equivalent path path file overwrite load_geocode_cache(), current cache wholly replaced one file?","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/geocode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocode — geocode","text":"output \"latlon\", \"latlona\", \"\", tibble (classed data frame). \"\", list.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/geocode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geocode — geocode","text":"Note: geocode() uses Google's Geocoding API geocode addresses. Please take care disclose sensitive information. https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8972108/ suggest various alternative options data.","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/geocode.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Geocode — geocode","text":"David Kahle david@kahle.io","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/geom_leg.html","id":null,"dir":"Reference","previous_headings":"","what":"Single line segments with rounded ends — geom_leg","title":"Single line segments with rounded ends — geom_leg","text":"ggplot2's segment rounded ends.  mainly included ggmap historical reasons.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/geom_leg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single line segments with rounded ends — geom_leg","text":"","code":"geom_leg(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   arrow = NULL,   lineend = \"round\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/geom_leg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single line segments with rounded ends — geom_leg","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, either ggproto Geom subclass string naming stat stripped stat_ prefix (e.g. \"count\" rather \"stat_count\") position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. arrow specification arrow heads, created grid::arrow(). lineend Line end style (round, butt, square). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/geom_leg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Single line segments with rounded ends — geom_leg","text":"intended use ggmap package.  designed mercator projection.","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/geom_leg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single line segments with rounded ends — geom_leg","text":"","code":"if (FALSE)  # removed for R CMD check speed  map <- get_map(   location = c(-77.0425, 38.8925), # painfully picked by hand   source = \"google\", zoom = 14, maptype = \"satellite\" ) ggmap(map) #> Error in eval(expr, envir, enclos): object 'map' not found   (legs_df <- route(   \"the white house, dc\",   \"lincoln memorial washington dc\",   alternatives = TRUE )) #> Error in route(\"the white house, dc\", \"lincoln memorial washington dc\",     alternatives = TRUE): Google now requires an API key; see `ggmap::register_google()`.  ggplot(data = legs_df) +   geom_leg(aes(     x = start_lon, xend = end_lon,     y = start_lat, yend = end_lat   )) +   coord_map() #> Error in eval(expr, envir, enclos): object 'legs_df' not found  ggplot(data = legs_df) +   geom_leg(aes(     x = start_lon, xend = end_lon,     y = start_lat, yend = end_lat,     color = route   )) +   coord_map() #> Error in eval(expr, envir, enclos): object 'legs_df' not found   ggmap(map) +   geom_leg(     aes(       x = start_lon, xend = end_lon,       y = start_lat, yend = end_lat     ),     data = legs_df, color = \"red\"   ) #> Error in eval(expr, envir, enclos): object 'map' not found  # adding a color aesthetic errors because of a base-layer problem # ggmap(map) + #   geom_leg( #     aes( #       x = start_lon, xend = end_lon, #       y = start_lat, yend = end_lat, #       color = route #   ) # )   # this is probably the easiest hack to fix it ggplot(data = legs_df) +   inset_ggmap(map) +   geom_leg(     aes(       x = start_lon, xend = end_lon,       y = start_lat, yend = end_lat,       color = route     ),     data = legs_df   ) +   coord_map() #> Error in eval(expr, envir, enclos): object 'legs_df' not found"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_cloudmademap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a CloudMade map. — get_cloudmademap","title":"Get a CloudMade map. — get_cloudmademap","text":"get_cloudmademap() accesses tile server Stamen Maps downloads/stitches map tiles/formats map image. function requires api key can obtained free http://cloudmade.com/user/show, now defunct. Thousands maptypes (\"styles\"), including create--options, available http://maps.cloudmade.com/editor (defunct).","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_cloudmademap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a CloudMade map. — get_cloudmademap","text":"","code":"get_cloudmademap(   bbox = c(left = -95.80204, bottom = 29.38048, right = -94.92313, top = 30.14344),   zoom = 10,   api_key,   maptype = 1,   highres = TRUE,   crop = TRUE,   messaging = FALSE,   urlonly = FALSE,   filename = NULL,   color = c(\"color\", \"bw\"),   ... )"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_cloudmademap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a CloudMade map. — get_cloudmademap","text":"bbox bounding box format c(lowerleftlon, lowerleftlat, upperrightlon, upperrightlat). zoom zoom level api_key character string containing cloud made api key, see details maptype integer cloud made calls style, see details highres double resolution crop crop raw map tiles specified bounding box messaging turn messaging /urlonly return url filename destination file download (file extension added according format). Default NULL means random tempfile(). color color black--white ... ...","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_cloudmademap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a CloudMade map. — get_cloudmademap","text":"ggmap object (classed raster object bounding box attribute)","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_cloudmademap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get a CloudMade map. — get_cloudmademap","text":"David Kahle david@kahle.io","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_googlemap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a Google Map. — get_googlemap","title":"Get a Google Map. — get_googlemap","text":"get_googlemap() queries Google Maps Static API version 2 download static map.  Note cases using function agreeing Google Maps API Terms Service https://cloud.google.com/maps-platform/terms/. Note mid-2018, registering Google Cloud obtain API key required use Google's services, including get_googlemap(). Usage billing may apply, see links See Also documentation details.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_googlemap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a Google Map. — get_googlemap","text":"","code":"get_googlemap(   center = c(lon = -95.3632715, lat = 29.7632836),   zoom = 10,   size = c(640, 640),   scale = 2,   format = c(\"png8\", \"gif\", \"jpg\", \"jpg-baseline\", \"png32\"),   maptype = GOOGLE_VALID_MAP_TYPES,   language = \"en-EN\",   messaging = FALSE,   urlonly = FALSE,   filename = NULL,   color = c(\"color\", \"bw\"),   force = FALSE,   where = tempdir(),   archiving = FALSE,   ext = \"com\",   inject = \"\",   region,   markers,   path,   visible,   style,   ... )"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_googlemap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a Google Map. — get_googlemap","text":"center center map; either longitude/latitude numeric vector string containing location, case geocode() called source = \"google\". (default: c(lon = -95.3632715, lat = 29.7632836), reference Houston, Texas) zoom map zoom; integer 3 (continent) 21 (building), default value 10 (city) size rectangular dimensions map pixels - horizontal x vertical - max c(640, 640). parameter affected multiplicative way scale. scale multiplicative factor number pixels returned possible values 1, 2, 4 (e.g. size = c(640,640) scale = 2 returns image 1280x1280 pixels).  4 reserved google business users .  scale also affects size labels well. format character string providing image format - png, jpeg, gif formats available various flavors maptype character string providing google map theme. options available \"terrain\", \"satellite\", \"roadmap\", \"hybrid\" language character string providing language map labels (themes ) format \"en-EN\".  languages supported; default language used messaging turn messaging /urlonly return url filename destination file download (file extension added according format). Default NULL means random tempfile(). color color black--white force map file, new map looked ? file drawer located (without terminating \"/\") archiving use archived maps.  note: changing TRUE agree one approved uses listed Google Maps API Terms Service : https://cloud.google.com/maps-platform/terms/. ext domain extension (e.g. \"com\", \"co.nz\") inject character string add url region borders display region code specified two-character ccTLD (\"top-level domain\") value, see https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains#Country_code_top-level_domains markers data.frame first column longitude, second column latitude, google markers embedded map image, character string passed directly api path data.frame (list data.frames) first column longitude, second column latitude, single path embedded map image, character string passed directly api visible location longitude/latitude numeric vector (data frame first column longitude, second latitude) vector character string addresses visible map extent style character string supplied directly api style argument named vector (see examples). powerful complex specification, see https://developers.google.com/maps/documentation/maps-static/ ... ...","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_googlemap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a Google Map. — get_googlemap","text":"ggmap object (classed raster object bounding box attribute)","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_googlemap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get a Google Map. — get_googlemap","text":"David Kahle david@kahle.io","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Grab a map. — get_map","title":"Grab a map. — get_map","text":"get_map() smart wrapper queries Google Maps, OpenStreetMap, Stadia Maps servers map.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grab a map. — get_map","text":"","code":"get_map(   location = c(lon = -95.3632715, lat = 29.7632836),   zoom = \"auto\",   scale = \"auto\",   maptype = c(GOOGLE_VALID_MAP_TYPES, STADIA_VALID_MAP_TYPES),   source = c(\"google\", \"osm\", \"stadia\"),   force = ifelse(source == \"google\", TRUE, FALSE),   messaging = FALSE,   urlonly = FALSE,   filename = NULL,   crop = TRUE,   color = c(\"color\", \"bw\"),   language = \"en-EN\",   ... )"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grab a map. — get_map","text":"location address, longitude/latitude pair (order), left/bottom/right/top bounding box zoom map zoom, integer 3 (continent) 21 (building), default value 10 (city).  openstreetmaps limits zoom 18, limit Stadia Maps depends maptype.  \"auto\" automatically determines zoom bounding box specifications, defaulted 10 center/zoom specifications.  maps whole world currently supported. scale scale argument get_googlemap() get_openstreetmap() maptype character string providing map theme. options available \"terrain\", \"terrain-background\", \"satellite\", \"roadmap\", \"hybrid\" (Google Maps), \"stamen_terrain\", \"stamen_toner\", \"stamen_toner_lite\", \"stamen_watercolor\", \"stamen_terrain_background\", \"stamen_toner_background\", \"stamen_terrain_lines\", \"stamen_terrain_labels\", \"stamen_toner_lines\", \"stamen_toner_labels\" (Stadia Maps) source Google Maps (\"google\"), OpenStreetMap (\"osm\"), Stadia Maps (\"stadia\") force force new map (use archived version) messaging turn messaging /urlonly return url filename destination file download (file extension added according format). Default NULL means random tempfile(). crop (Stadia cloudmade maps) crop tiles bounding box color color (\"color\") black--white (\"bw\") language language google maps ... ...","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grab a map. — get_map","text":"ggmap object (classed raster object bounding box attribute)","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_map.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Grab a map. — get_map","text":"David Kahle david@kahle.io","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_navermap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a Naver Map — get_navermap","title":"Get a Naver Map — get_navermap","text":"(least) temporarily unavailable Naver API changed.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_navermap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a Naver Map — get_navermap","text":"","code":"get_navermap(   center = c(lon = 126.9849208, lat = 37.5664519),   zoom = 4,   size = c(640, 640),   format = c(\"png\", \"jpeg\", \"jpg\"),   crs = c(\"EPSG:4326\", \"NHN:2048\", \"NHN:128\", \"EPSG:4258\", \"EPSG:4162\", \"EPSG:2096\",     \"EPSG:2097\", \"EPSG:2098\", \"EPSG:900913\"),   baselayer = c(\"default\", \"satellite\"),   color = c(\"color\", \"bw\"),   overlayers = c(\"anno_satellite\", \"bicycle\", \"roadview\", \"traffic\"),   markers,   key,   uri,   filename = NULL,   messaging = FALSE,   urlonly = FALSE,   force = FALSE,   where = tempdir(),   archiving = TRUE,   ... )"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_navermap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a Naver Map — get_navermap","text":"center center map.  can longitude/latitude numeric vector. zoom map zoom, integer 1 14 (building), default value 10 size rectangular dimensions map pixels - horizontal x vertical - max c(640, 640). format character string providing image format - png, jpeg(jpg) formats available various flavors crs Coordinate system, currently supports EPSG:4326 baselayer base layer, can either \"default\", \"satellite\". color color black--white overlayers overlay layers, can \"anno_satellite\",\"bicycle\", \"roadview\", \"traffic\". markers data.frame first column longitude, second column latitude, naver markers embedded map image, character string passed directly api key key code naver api center uri registered host url filename destination file download (file extension added according format). Default NULL means random tempfile(). messaging turn messaging /urlonly return url force map file, new map looked ? file drawer located (without terminating \"/\") archiving use archived maps.  note: changing TRUE agree abide rules governing caching naver maps ... ...","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_navermap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a Naver Map — get_navermap","text":"get_navermap() accesses Naver Static Maps API version 1.1 download static map. Note cases using function agreeing Naver Maps API Terms Service.","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_navermap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get a Naver Map — get_navermap","text":"Heewon Jeon madjakarta@gmail.com","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_openstreetmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an OpenStreetMap — get_openstreetmap","title":"Get an OpenStreetMap — get_openstreetmap","text":"get_openstreetmap() accesses tile server OpenStreetMap downloads/formats map image. simply wrapper web-based version https://www.openstreetmap.org/.  know get map want, go , navigate map extent want, click export tab top page, copy information function.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_openstreetmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an OpenStreetMap — get_openstreetmap","text":"","code":"get_openstreetmap(   bbox = c(left = -95.80204, bottom = 29.38048, right = -94.92313, top = 30.14344),   scale = 606250,   format = c(\"png\", \"jpeg\", \"svg\", \"pdf\", \"ps\"),   messaging = FALSE,   urlonly = FALSE,   filename = NULL,   color = c(\"color\", \"bw\"),   ... )"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_openstreetmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an OpenStreetMap — get_openstreetmap","text":"bbox bounding box format c(lowerleftlon, lowerleftlat, upperrightlon, upperrightlat) scale scale parameter, see https://wiki.openstreetmap.org/wiki/MinScaleDenominator.  smaller scales provide finer degree detail, larger scales produce coarse detail. scale argument tricky number correctly specify. cases, get error downloading openstreetmap error attributable improper scale specification. OSM_scale_lookup() can help; best way get correct range go https://www.openstreetmap.org/, navigate map interest, click export top page, click 'map image' copy scale listed. format character string providing image format - png, jpeg, svg, pdf, ps formats messaging turn messaging /urlonly return url filename destination file download (file extension added according format). Default NULL means random tempfile(). color color black--white ... ...","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_openstreetmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an OpenStreetMap — get_openstreetmap","text":"ggmap object (classed raster object bounding box attribute)","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_openstreetmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get an OpenStreetMap — get_openstreetmap","text":"cases OSM server unavailable,  cases receive error message utils::download.file() message HTTP status '503 Service Unavailable'.  can confirm setting urlonly = TRUE, entering URL web browser.  solution either (1) change sources (2) wait OSM servers come back . See https://www.openstreetmap.org/copyright/ license copyright information.","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_openstreetmap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get an OpenStreetMap — get_openstreetmap","text":"David Kahle david@kahle.io","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_stadiamap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a Map from Stadia Maps — get_stadiamap","title":"Get a Map from Stadia Maps — get_stadiamap","text":"get_stadiamap() accesses tile server Stadia Maps downloads/stitches map tiles/formats map image.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_stadiamap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a Map from Stadia Maps — get_stadiamap","text":"","code":"get_stadiamap(   bbox = c(left = -95.80204, bottom = 29.38048, right = -94.92313, top = 30.14344),   zoom = 10,   maptype = STADIA_VALID_MAP_TYPES,   crop = TRUE,   messaging = FALSE,   urlonly = FALSE,   color = c(\"color\", \"bw\"),   force = FALSE,   where = tempdir(),   ... )"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_stadiamap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a Map from Stadia Maps — get_stadiamap","text":"bbox bounding box format c(lowerleftlon, lowerleftlat, upperrightlon, upperrightlat). zoom zoom level maptype stamen_terrain, stamen_toner, stamen_toner_lite, stamen_watercolor, stamen_terrain_background, stamen_toner_background, stamen_terrain_lines, stamen_terrain_labels, stamen_toner_lines, stamen_toner_labels. crop crop raw map tiles specified bounding box. FALSE, resulting map cover bounding box specified. messaging turn messaging /urlonly return url color color black--white (use force = TRUE already downloaded images) force map file, new map looked ? file drawer located (without terminating \"/\") ... ...","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_stadiamap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a Map from Stadia Maps — get_stadiamap","text":"ggmap object (classed raster object bounding box attribute)","code":""},{"path":[]},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_stamenmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a Stamen Map — get_stamenmap","title":"Get a Stamen Map — get_stamenmap","text":"get_stamenmap() accesses tile server Stamen Maps downloads/stitches map tiles/formats map image. Note Stamen maps cover entire world.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_stamenmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a Stamen Map — get_stamenmap","text":"","code":"get_stamenmap(   bbox = c(left = -95.80204, bottom = 29.38048, right = -94.92313, top = 30.14344),   zoom = 10,   maptype = c(\"terrain\", \"terrain-background\", \"terrain-labels\", \"terrain-lines\",     \"toner\", \"toner-2010\", \"toner-2011\", \"toner-background\", \"toner-hybrid\",     \"toner-labels\", \"toner-lines\", \"toner-lite\", \"watercolor\"),   crop = TRUE,   messaging = FALSE,   urlonly = FALSE,   color = c(\"color\", \"bw\"),   force = FALSE,   where = tempdir(),   https = FALSE,   ... )  get_stamen_tile_download_fail_log()  retry_stamen_map_download()"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_stamenmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a Stamen Map — get_stamenmap","text":"bbox bounding box format c(lowerleftlon, lowerleftlat, upperrightlon, upperrightlat). zoom zoom level maptype terrain, terrain-background, terrain-labels, terrain-lines, toner, toner-2010, toner-2011, toner-background, toner-hybrid, toner-labels, toner-lines, toner-lite, watercolor. crop crop raw map tiles specified bounding box. FALSE, resulting map cover bounding box specified. messaging turn messaging /urlonly return url color color black--white (use force = TRUE already downloaded images) force map file, new map looked ? file drawer located (without terminating \"/\") https TRUE, queries https endpoint web traffic tile server ecrypted using SSL. ... ...","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/get_stamenmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a Stamen Map — get_stamenmap","text":"ggmap object (classed raster object bounding box attribute)","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggimage.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an image using ggplot2 — ggimage","title":"Plot an image using ggplot2 — ggimage","text":"ggimage near ggplot2 equivalent image.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggimage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an image using ggplot2 — ggimage","text":"","code":"ggimage(mat, fullpage = TRUE, coord_equal = TRUE, scale_axes = FALSE)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggimage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an image using ggplot2 — ggimage","text":"mat matrix, imagematrix, array, raster (something can coerced .raster) fullpage image take entire viewport? coord_equal axes units equal? scale_axes axes (0,ncol(mat)-1)x(0,nrow(mat)-1) (F) (0,1)x(0,1) (T)","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggimage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot an image using ggplot2 — ggimage","text":"ggplot object","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggimage.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot an image using ggplot2 — ggimage","text":"David Kahle david@kahle.io","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggimage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot an image using ggplot2 — ggimage","text":"","code":"img <- matrix(1:16, 4, 4) image(img)  ggimage(t(img[,4:1]), fullpage = FALSE, scale_axes = TRUE) #> ℹ Rescaling `mat` to [0,1]  ggimage(t(img[,4:1]), fullpage = FALSE) #> ℹ Rescaling `mat` to [0,1]    if (FALSE) { # not run due to slow performance  data(hadley) ggimage(hadley) ggimage(hadley, coord_equal = FALSE)  x <- seq(1, 438, 15); n <- length(x) df <- data.frame(x = x, y = -(120*(scale((x - 219)^3 - 25000*x) + rnorm(n)/2 - 3))) qplot(x, y, data = df, geom = c('smooth','point')) ggimage(hadley, fullpage = FALSE) +   geom_smooth(     aes(x = x, y = y),     data = df, color = 'green', size = 1   ) +   geom_point(     aes(x = x, y = y),     data = df, color = 'green', size = 3   )  }"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/gglocator.html","id":null,"dir":"Reference","previous_headings":"","what":"Locator for ggplot objects — gglocator","title":"Locator for ggplot objects — gglocator","text":"Locator ggplot objects (Note : accurate extent = \"normal\" using ggmap.)","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/gglocator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locator for ggplot objects — gglocator","text":"","code":"gglocator(n = 1, message = FALSE, mercator = TRUE, ...)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/gglocator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locator for ggplot objects — gglocator","text":"n number points locate. message unused mercator logical flag; plot treated using projection common web map services? Set FALSE axes plot use linear scale. ... additional arguments (including deprecated, e.g. xexpand)","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/gglocator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locator for ggplot objects — gglocator","text":"data frame columns according x y aesthetics","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/gglocator.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Locator for ggplot objects — gglocator","text":"Tyler Rinker, Baptiste Auguie, DWin, David Kahle, \\@Nikolai-Hlubek \\@mvkorpel.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/gglocator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locator for ggplot objects — gglocator","text":"","code":"if (interactive()) {  # only run for interactive sessions df <- expand.grid(x = 0:-5, y = 0:-5)  ggplot(df, aes(x, y)) + geom_point() +   annotate(geom = \"point\", x = -2, y = -2, colour = \"red\")  (pt <- gglocator(mercator = FALSE)) # click red point  last_plot() +   annotate(\"point\", pt$x, pt$y, color = \"blue\", size = 3, alpha = .5)  hdf <- get_map(\"houston, texas\") ggmap(hdf, extent = \"normal\") (pt <- gglocator(mercator = TRUE)) last_plot() +   annotate(\"point\", pt$lon, pt$lat, color = \"blue\", size = 3, alpha = .5)  }"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmap-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Defunct ggmap functions — ggmap-defunct","title":"Defunct ggmap functions — ggmap-defunct","text":"provider services change time, ggmap make corresponding changes.  Since inception, services stopped offering previous functionality, cases required us remove functions package entirely.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmap-defunct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Defunct ggmap functions — ggmap-defunct","text":"following defunct ggmap functions: get_cloudemademap get_navermap get_openstreetmap get_stamenmap","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a ggmap object — ggmap","title":"Plot a ggmap object — ggmap","text":"ggmap plots raster object produced get_map().","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a ggmap object — ggmap","text":"","code":"ggmap(   ggmap,   extent = \"panel\",   base_layer,   maprange = FALSE,   legend = \"right\",   padding = 0.02,   darken = c(0, \"black\"),   b,   fullpage,   expand,   ... )"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a ggmap object — ggmap","text":"ggmap object class ggmap (function get_map) extent much plot map take ? \"normal\", \"device\", \"panel\" (default) base_layer ggplot(aes(...), ...) call; see examples maprange logical use base_layer; map define x y limits? legend \"left\", \"right\" (default), \"bottom\", \"top\", \"bottomleft\", \"bottomright\", \"topleft\", \"topright\", \"none\" (used extent = \"device\") padding distance legend corner plot (used legend, formerly b) darken vector form c(number, color), number (0,1) color character string indicating color darken.  0 indicates darkening, 1 indicates black-. b Deprecated, renamed padding. Overrides padding argument. fullpage Deprecated, equivalent extent = \"device\" TRUE. Overrides extent argument. expand Deprecated, equivalent extent = \"panel\" TRUE fullpage FALSE. fullpage FALSE expand FALSE, equivalent extent=\"normal\". Overrides extent argument. ... ...","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a ggmap object — ggmap","text":"ggplot object","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot a ggmap object — ggmap","text":"David Kahle david@kahle.io","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a ggmap object — ggmap","text":"","code":"if (FALSE) ## map queries drag R CMD check   ## extents and legends ################################################## hdf <- get_map(\"houston, texas\") ggmap(hdf, extent = \"normal\") #> Error in eval(expr, envir, enclos): object 'hdf' not found ggmap(hdf) # extent = \"panel\", note qmap defaults to extent = \"device\" #> Error in eval(expr, envir, enclos): object 'hdf' not found ggmap(hdf, extent = \"device\") #> Error in eval(expr, envir, enclos): object 'hdf' not found    # make some fake spatial data mu <- c(-95.3632715, 29.7632836); nDataSets <- sample(4:10,1) chkpts <- NULL for(k in 1:nDataSets){   a <- rnorm(2); b <- rnorm(2);   si <- 1/3000 * (outer(a,a) + outer(b,b))   chkpts <- rbind(     chkpts,     cbind(MASS::mvrnorm(rpois(1,50), jitter(mu, .01), si), k)   ) } chkpts <- data.frame(chkpts) names(chkpts) <- c(\"lon\", \"lat\",\"class\") chkpts$class <- factor(chkpts$class) qplot(lon, lat, data = chkpts, colour = class) #> Warning: `qplot()` was deprecated in ggplot2 3.4.0.  # show it on the map ggmap(hdf, extent = \"normal\") +   geom_point(aes(x = lon, y = lat, colour = class), data = chkpts, alpha = .5) #> Error in eval(expr, envir, enclos): object 'hdf' not found  ggmap(hdf) +   geom_point(aes(x = lon, y = lat, colour = class), data = chkpts, alpha = .5) #> Error in eval(expr, envir, enclos): object 'hdf' not found  ggmap(hdf, extent = \"device\") +   geom_point(aes(x = lon, y = lat, colour = class), data = chkpts, alpha = .5) #> Error in eval(expr, envir, enclos): object 'hdf' not found  theme_set(theme_bw()) ggmap(hdf, extent = \"device\") +   geom_point(aes(x = lon, y = lat, colour = class), data = chkpts, alpha = .5) #> Error in eval(expr, envir, enclos): object 'hdf' not found  ggmap(hdf, extent = \"device\", legend = \"topleft\") +   geom_point(aes(x = lon, y = lat, colour = class), data = chkpts, alpha = .5) #> Error in eval(expr, envir, enclos): object 'hdf' not found  # qmplot is great for this kind of thing... qmplot(lon, lat, data = chkpts, color = class, darken = .6) #> ℹ Using `zoom = 11` #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors. #> Error in get_stamen_url(maptype = maptype, zoom = zoom, x = row[\"x\"],     y = row[\"y\"]): Stadia Maps requires an API key; see `ggmap::register_stadiamaps()`. qmplot(lon, lat, data = chkpts, geom = \"density2d\", color = class, darken = .6) #> ℹ Using `zoom = 11` #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors. #> Error in get_stamen_url(maptype = maptype, zoom = zoom, x = row[\"x\"],     y = row[\"y\"]): Stadia Maps requires an API key; see `ggmap::register_stadiamaps()`.  ## maprange ##################################################  hdf <- get_map() #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`. mu <- c(-95.3632715, 29.7632836) points <- data.frame(MASS::mvrnorm(1000, mu = mu, diag(c(.1, .1)))) names(points) <- c(\"lon\", \"lat\") points$class <- sample(c(\"a\",\"b\"), 1000, replace = TRUE)  ggmap(hdf) + geom_point(data = points) # maprange built into extent = panel, device #> Error in eval(expr, envir, enclos): object 'hdf' not found ggmap(hdf) + geom_point(aes(colour = class), data = points) #> Error in eval(expr, envir, enclos): object 'hdf' not found  ggmap(hdf, extent = \"normal\") + geom_point(data = points) #> Error in eval(expr, envir, enclos): object 'hdf' not found # note that the following is not the same as extent = panel ggmap(hdf, extent = \"normal\", maprange = TRUE) + geom_point(data = points) #> Error in eval(expr, envir, enclos): object 'hdf' not found  # and if you need your data to run off on a extent = device (legend included) ggmap(hdf, extent = \"normal\", maprange = TRUE) +   geom_point(aes(colour = class), data = points) +   theme_nothing(legend = TRUE) + theme(legend.position = \"right\") #> Error in eval(expr, envir, enclos): object 'hdf' not found  # again, qmplot is probably more useful qmplot(lon, lat, data = points, color = class, darken = .4, alpha = I(.6)) #> ℹ Using `zoom = 9` #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors. #> Error in get_stamen_url(maptype = maptype, zoom = zoom, x = row[\"x\"],     y = row[\"y\"]): Stadia Maps requires an API key; see `ggmap::register_stadiamaps()`. qmplot(lon, lat, data = points, color = class, maptype = \"stamen_toner_lite\") #> ℹ Using `zoom = 9` #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors. #> Error in get_stamen_url(maptype = maptype, zoom = zoom, x = row[\"x\"],     y = row[\"y\"]): Stadia Maps requires an API key; see `ggmap::register_stadiamaps()`.  ## cool examples ##################################################  # contour overlay ggmap(get_map(maptype = \"satellite\"), extent = \"device\") +   stat_density2d(aes(x = lon, y = lat, colour = class), data = chkpts, bins = 5) #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`.   # adding additional content library(grid) baylor <- get_map(\"one bear place, waco, texas\", zoom = 15, maptype = \"satellite\") #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`. ggmap(baylor) #> Error in eval(expr, envir, enclos): object 'baylor' not found  # use gglocator to find lon/lat\"s of interest (clicks <- gglocator(2) ) #> Error in data.frame(lon = lon_deg, lat = lat_deg): arguments imply differing number of rows: 1, 0  ggmap(baylor) +   geom_point(aes(x = lon, y = lat), data = clicks, colour = \"red\", alpha = .5) #> Error in eval(expr, envir, enclos): object 'baylor' not found expand.grid(lon = clicks$lon, lat = clicks$lat) #> Error in eval(expr, envir, enclos): object 'clicks' not found  ggmap(baylor) + theme_bw() +   annotate(\"segment\", x=-97.110, xend=-97.1188, y=31.5450, yend=31.5485,     colour=I(\"red\"), arrow = arrow(length=unit(0.3,\"cm\")), size = 1.5) +   annotate(\"label\", x=-97.113, y=31.5445, label = \"Department of Statistical Science\",     colour = I(\"red\"), size = 3.5) +   labs(x = \"Longitude\", y = \"Latitude\") + ggtitle(\"Baylor University\") #> Error in eval(expr, envir, enclos): object 'baylor' not found   baylor <- get_map(\"marrs mclean science, waco, texas\", zoom = 16, maptype = \"satellite\") #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`.  ggmap(baylor, extent = \"panel\") +   annotate(\"segment\", x=-97.1175, xend=-97.1188, y=31.5449, yend=31.5485,     colour=I(\"red\"), arrow = arrow(length=unit(0.4,\"cm\")), size = 1.5) +   annotate(\"label\", x=-97.1175, y=31.5447, label = \"Department of Statistical Science\",     colour = I(\"red\"), size = 4) #> Error in eval(expr, envir, enclos): object 'baylor' not found    # a shapefile like layer data(zips) #> Warning: data set ‘zips’ not found ggmap(get_map(maptype = \"satellite\", zoom = 8), extent = \"device\") +   geom_polygon(aes(x = lon, y = lat, group = plotOrder),     data = zips, colour = NA, fill = \"red\", alpha = .2) +   geom_path(aes(x = lon, y = lat, group = plotOrder),     data = zips, colour = \"white\", alpha = .4, size = .4) #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`.  library(plyr) zipsLabels <- ddply(zips, .(zip), function(df){   df[1,c(\"area\", \"perimeter\", \"zip\", \"lonCent\", \"latCent\")] }) #> Error in eval(expr, envir, enclos): object 'zips' not found ggmap(get_map(maptype = \"satellite\", zoom = 9),     extent = \"device\", legend = \"none\", darken = .5) +   geom_text(aes(x = lonCent, y = latCent, label = zip, size = area),     data = zipsLabels, colour = I(\"red\")) +   scale_size(range = c(1.5,6)) #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`.  qmplot(lonCent, latCent, data = zipsLabels, geom = \"text\",   label = zip, size = area, maptype = \"stamen_toner_lite\", color = I(\"red\") ) #> Error in eval(expr, envir, enclos): object 'zipsLabels' not found   ## crime data example ##################################################  # only violent crimes violent_crimes <- subset(crime,   offense != \"auto theft\" &   offense != \"theft\" &   offense != \"burglary\" ) #> Error in eval(expr, envir, enclos): object 'crime' not found  # rank violent crimes violent_crimes$offense <-   factor(violent_crimes$offense,     levels = c(\"robbery\", \"aggravated assault\",       \"rape\", \"murder\")   ) #> Error in eval(expr, envir, enclos): object 'violent_crimes' not found  # restrict to downtown violent_crimes <- subset(violent_crimes,   -95.39681 <= lon & lon <= -95.34188 &    29.73631 <= lat & lat <=  29.78400 ) #> Error in eval(expr, envir, enclos): object 'violent_crimes' not found   # get map and bounding box theme_set(theme_bw(16)) HoustonMap <- qmap(\"houston\", zoom = 14, color = \"bw\",   extent = \"device\", legend = \"topleft\") #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`. HoustonMap <- ggmap(   get_map(\"houston\", zoom = 14, color = \"bw\"),   extent = \"device\", legend = \"topleft\" ) #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`.  # the bubble chart HoustonMap +    geom_point(aes(x = lon, y = lat, colour = offense, size = offense), data = violent_crimes) +    scale_colour_discrete(\"Offense\", labels = c(\"Robbery\",\"Aggravated Assault\",\"Rape\",\"Murder\")) +    scale_size_discrete(\"Offense\", labels = c(\"Robbery\",\"Aggravated Assault\",\"Rape\",\"Murder\"),      range = c(1.75,6)) +    guides(size = guide_legend(override.aes = list(size = 6))) +    theme(      legend.key.size = grid::unit(1.8,\"lines\"),      legend.title = element_text(size = 16, face = \"bold\"),      legend.text = element_text(size = 14)    ) +    labs(colour = \"Offense\", size = \"Offense\") #> Error in eval(expr, envir, enclos): object 'HoustonMap' not found   # doing it with qmplot is even easier qmplot(lon, lat, data = violent_crimes, maptype = \"stamen_toner_lite\",   color = offense, size = offense, legend = \"topleft\" ) #> Error in eval(expr, envir, enclos): object 'violent_crimes' not found  # or, with styling: qmplot(lon, lat, data = violent_crimes, maptype = \"stamen_toner_lite\",   color = offense, size = offense, legend = \"topleft\" ) +   scale_colour_discrete(\"Offense\", labels = c(\"Robbery\",\"Aggravated Assault\",\"Rape\",\"Murder\")) +   scale_size_discrete(\"Offense\", labels = c(\"Robbery\",\"Aggravated Assault\",\"Rape\",\"Murder\"),     range = c(1.75,6)) +   guides(size = guide_legend(override.aes = list(size = 6))) +   theme(     legend.key.size = grid::unit(1.8,\"lines\"),     legend.title = element_text(size = 16, face = \"bold\"),     legend.text = element_text(size = 14)   ) +   labs(colour = \"Offense\", size = \"Offense\") #> Error in eval(expr, envir, enclos): object 'violent_crimes' not found       # a contour plot HoustonMap +   stat_density2d(aes(x = lon, y = lat, colour = offense),     size = 3, bins = 2, alpha = 3/4, data = violent_crimes) +    scale_colour_discrete(\"Offense\", labels = c(\"Robbery\",\"Aggravated Assault\",\"Rape\",\"Murder\")) +    theme(      legend.text = element_text(size = 15, vjust = .5),      legend.title = element_text(size = 15,face=\"bold\"),      legend.key.size = grid::unit(1.8,\"lines\")    ) #> Error in eval(expr, envir, enclos): object 'HoustonMap' not found    # 2d histogram... HoustonMap +   stat_bin_2d(aes(x = lon, y = lat, colour = offense, fill = offense),     size = .5, bins = 30, alpha = 2/4, data = violent_crimes) +    scale_colour_discrete(\"Offense\",      labels = c(\"Robbery\",\"Aggravated Assault\",\"Rape\",\"Murder\"),      guide = FALSE) +    scale_fill_discrete(\"Offense\", labels = c(\"Robbery\",\"Aggravated Assault\",\"Rape\",\"Murder\")) +    theme(      legend.text = element_text(size = 15, vjust = .5),      legend.title = element_text(size = 15,face=\"bold\"),      legend.key.size = grid::unit(1.8,\"lines\")    ) #> Error in eval(expr, envir, enclos): object 'HoustonMap' not found      # changing gears (get a color map) houston <- get_map(\"houston\", zoom = 14) #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`. HoustonMap <- ggmap(houston, extent = \"device\", legend = \"topleft\") #> Error in eval(expr, envir, enclos): object 'houston' not found  # a filled contour plot... HoustonMap +   stat_density2d(aes(x = lon, y = lat, fill = ..level.., alpha = ..level..),     size = 2, bins = 4, data = violent_crimes, geom = \"polygon\") +   scale_fill_gradient(\"Violent\\nCrime\\nDensity\") +   scale_alpha(range = c(.4, .75), guide = FALSE) +   guides(fill = guide_colorbar(barwidth = 1.5, barheight = 10)) #> Error in eval(expr, envir, enclos): object 'HoustonMap' not found  # ... with an insert  overlay <- stat_density2d(aes(x = lon, y = lat, fill = ..level.., alpha = ..level..),     bins = 4, geom = \"polygon\", data = violent_crimes) #> Error in eval(expr, envir, enclos): object 'violent_crimes' not found  attr(houston,\"bb\") # to help finding (x/y)(min/max) vals below #> Error in eval(expr, envir, enclos): object 'houston' not found  HoustonMap +   stat_density2d(aes(x = lon, y = lat, fill = ..level.., alpha = ..level..),     bins = 4, geom = \"polygon\", data = violent_crimes) +   scale_fill_gradient(\"Violent\\nCrime\\nDensity\") +   scale_alpha(range = c(.4, .75), guide = FALSE) +   guides(fill = guide_colorbar(barwidth = 1.5, barheight = 10)) +   inset(     grob = ggplotGrob(ggplot() + overlay +       scale_fill_gradient(\"Violent\\nCrime\\nDensity\") +       scale_alpha(range = c(.4, .75), guide = FALSE) +       theme_inset()     ),     xmin = -95.35877, xmax = -95.34229,     ymin = 29.73754, ymax = 29.75185   ) #> Error in eval(expr, envir, enclos): object 'HoustonMap' not found          ## more examples ##################################################  # you can layer anything on top of the maps (even meaningless stuff) df <- data.frame(   lon = rep(seq(-95.39, -95.35, length.out = 8), each = 20),   lat = sapply(     rep(seq(29.74, 29.78, length.out = 8), each = 20),     function(x) rnorm(1, x, .002)   ),   class = rep(letters[1:8], each = 20) )  qplot(lon, lat, data = df, geom = \"boxplot\", fill = class)   HoustonMap +   geom_boxplot(aes(x = lon, y = lat, fill = class), data = df) #> Error in eval(expr, envir, enclos): object 'HoustonMap' not found     ## the base_layer argument - faceting ##################################################  df <- data.frame(   x = rnorm(1000, -95.36258, .2),   y = rnorm(1000,  29.76196, .2) )  # no apparent change because ggmap sets maprange = TRUE with extent = \"panel\" ggmap(get_map(), base_layer = ggplot(aes(x = x, y = y), data = df)) +   geom_point(colour = \"red\") #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`.  # ... but there is a difference ggmap(get_map(), base_layer = ggplot(aes(x = x, y = y), data = df), extent = \"normal\") +   geom_point(colour = \"red\") #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`.  # maprange can fix it (so can extent = \"panel\") ggmap(get_map(), maprange = TRUE, extent = \"normal\",   base_layer = ggplot(aes(x = x, y = y), data = df)) +   geom_point(colour = \"red\") #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`.  # base_layer makes faceting possible df <- data.frame(   x = rnorm(10*100, -95.36258, .075),   y = rnorm(10*100,  29.76196, .075),   year = rep(paste(\"year\",format(1:10)), each = 100) ) ggmap(get_map(), base_layer = ggplot(aes(x = x, y = y), data = df)) +   geom_point() +  facet_wrap(~ year) #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`.  ggmap(get_map(), base_layer = ggplot(aes(x = x, y = y), data = df), extent = \"device\") +   geom_point() +  facet_wrap(~ year) #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`.  qmplot(x, y, data = df) #> ℹ Using `zoom = 11` #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors. #> Error in get_stamen_url(maptype = maptype, zoom = zoom, x = row[\"x\"],     y = row[\"y\"]): Stadia Maps requires an API key; see `ggmap::register_stadiamaps()`. qmplot(x, y, data = df, facets = ~ year) #> ℹ Using `zoom = 11` #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors. #> Error in get_stamen_url(maptype = maptype, zoom = zoom, x = row[\"x\"],     y = row[\"y\"]): Stadia Maps requires an API key; see `ggmap::register_stadiamaps()`.   ## neat faceting examples ##################################################  # simulated example df <- data.frame(   x = rnorm(10*100, -95.36258, .05),   y = rnorm(10*100,  29.76196, .05),   year = rep(paste(\"year\",format(1:10)), each = 100) ) for(k in 0:9){   df$x[1:100 + 100*k] <- df$x[1:100 + 100*k] + sqrt(.05)*cos(2*pi*k/10)   df$y[1:100 + 100*k] <- df$y[1:100 + 100*k] + sqrt(.05)*sin(2*pi*k/10) }  ggmap(get_map(),   base_layer = ggplot(aes(x = x, y = y), data = df)) +   stat_density2d(aes(fill = ..level.., alpha = ..level..),     bins = 4, geom = \"polygon\") +   scale_fill_gradient2(low = \"white\", mid = \"orange\", high = \"red\", midpoint = 10) +   scale_alpha(range = c(.2, .75), guide = FALSE) +   facet_wrap(~ year) #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`.    # crime example by month levels(violent_crimes$month) <- paste(   toupper(substr(levels(violent_crimes$month),1,1)),   substr(levels(violent_crimes$month),2,20), sep = \"\" ) #> Error in eval(expr, envir, enclos): object 'violent_crimes' not found houston <- get_map(location = \"houston\", zoom = 14, source = \"osm\", color = \"bw\") #> Error in get_googlemap(center = location, zoom = zoom, filename = filename): Google now requires an API key; see `ggmap::register_google()`. HoustonMap <- ggmap(houston,   base_layer = ggplot(aes(x = lon, y = lat), data = violent_crimes)   ) #> Error in eval(expr, envir, enclos): object 'houston' not found  HoustonMap +   stat_density2d(aes(x = lon, y = lat, fill = ..level.., alpha = ..level..),     bins = I(5), geom = \"polygon\", data = violent_crimes) +   scale_fill_gradient2(\"Violent\\nCrime\\nDensity\",     low = \"white\", mid = \"orange\", high = \"red\", midpoint = 500) +   labs(x = \"Longitude\", y = \"Latitude\") + facet_wrap(~ month) +   scale_alpha(range = c(.2, .55), guide = FALSE) +   ggtitle(\"Violent Crime Contour Map of Downtown Houston by Month\") +   guides(fill = guide_colorbar(barwidth = 1.5, barheight = 10)) #> Error in eval(expr, envir, enclos): object 'HoustonMap' not found         ## darken argument ################################################## ggmap(get_map()) #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`. ggmap(get_map(), darken = .5) #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`. ggmap(get_map(), darken = c(.5,\"white\")) #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`. ggmap(get_map(), darken = c(.5,\"red\")) # silly, but possible #> Error in get_googlemap(center = location, zoom = zoom, maptype = maptype,     scale = scale, messaging = messaging, urlonly = urlonly,     force = force, filename = filename, color = color, language = language): Google now requires an API key; see `ggmap::register_google()`."},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmap_options.html","id":null,"dir":"Reference","previous_headings":"","what":"ggmap Options — ggmap_options","title":"ggmap Options — ggmap_options","text":"ggmap stores options named list R's global options, .e. getOption(\"ggmap\"). currently stores two options, one Google credentialing one suppress private API information URLs printed screen web queries placed. , see register_google().","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmap_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggmap Options — ggmap_options","text":"","code":"set_ggmap_option(...)  has_ggmap_options()  has_ggmap_option(option)  ggmap_credentials()"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmap_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggmap Options — ggmap_options","text":"... named listing options set option specific option query, e.g. \"display_api_key\"","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmap_options.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggmap Options — ggmap_options","text":"David Kahle david@kahle.io","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmap_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggmap Options — ggmap_options","text":"","code":"getOption(\"ggmap\") #> $google #> Key -   #> Account Type - standard  #> Day Limit - Inf  #> Second Limit - 50  #> Client -   #> Signature -   #>  #> $display_api_key #> [1] FALSE #>  has_ggmap_options() #> [1] TRUE has_ggmap_option(\"display_api_key\") #> [1] TRUE"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmapplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Don't use this function, use ggmap. — ggmapplot","title":"Don't use this function, use ggmap. — ggmapplot","text":"ggmap plots raster object produced get_map().","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmapplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Don't use this function, use ggmap. — ggmapplot","text":"","code":"ggmapplot(   ggmap,   fullpage = FALSE,   base_layer,   maprange = FALSE,   expand = FALSE,   ... )"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmapplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Don't use this function, use ggmap. — ggmapplot","text":"ggmap object class ggmap (function get_map()) fullpage logical; map take entire viewport? base_layer ggplot(aes(...), ...) call; see examples maprange logical use base_layer; map define x y limits? expand map extend edge panel? used base_layer maprange=TRUE. ... ...","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmapplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Don't use this function, use ggmap. — ggmapplot","text":"ggplot object","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/ggmapplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Don't use this function, use ggmap. — ggmapplot","text":"David Kahle david@kahle.io","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/hadley.html","id":null,"dir":"Reference","previous_headings":"","what":"Highly unofficial ggplot2 image — hadley","title":"Highly unofficial ggplot2 image — hadley","text":"Highly unofficial ggplot2 image","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/hadley.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Highly unofficial ggplot2 image — hadley","text":"Garrett Grolemund grolemund@gmail.com","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/inset.html","id":null,"dir":"Reference","previous_headings":"","what":"Add ggplot2 insets to a map — inset","title":"Add ggplot2 insets to a map — inset","text":"identical ggplot2::annotation_custom use ggmap","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/inset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add ggplot2 insets to a map — inset","text":"","code":"inset(grob, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/inset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add ggplot2 insets to a map — inset","text":"grob grob display xmin, xmax x location (data coordinates) giving horizontal location raster ymin, ymax y location (data coordinates) giving vertical location raster","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/inset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add ggplot2 insets to a map — inset","text":"useful adding tables, inset plots, grid-based decorations","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/inset.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add ggplot2 insets to a map — inset","text":"annotation_custom() expects grob fill entire viewport defined xmin, xmax, ymin, ymax. Grobs different (absolute) size center-justified region. Inf values can used fill full plot panel","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/inset_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a (ggplot2) raster layer — inset_raster","title":"Create a (ggplot2) raster layer — inset_raster","text":"special version ggplot2::annotation_raster use ggmap. (simply removes requirement cartesian coordinates.)  difference inset_raster() inset_ggmap() arguments. inset_ggmap() simply wrapper inset_raster() xmin, ..., ymax arguments equal map's bounding box.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/inset_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a (ggplot2) raster layer — inset_raster","text":"","code":"inset_raster(raster, xmin, xmax, ymin, ymax, interpolate = TRUE)  inset_ggmap(ggmap)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/inset_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a (ggplot2) raster layer — inset_raster","text":"raster raster object display xmin, xmax x location (data coordinates) giving horizontal location raster ymin, ymax y location (data coordinates) giving vertical location raster interpolate interpolate raster? (.e. antialiasing) ggmap ggmap object, see get_map()","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/inset_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a (ggplot2) raster layer — inset_raster","text":"","code":"if (FALSE)  # save cran check time  bbox <- c(left = -97.1268, bottom = 31.536245, right = -97.099334, top = 31.559652)  terrain_map <- get_stadiamap(bbox, zoom = 14, maptype = \"stamen_terrain_background\", color = \"bw\") #> Error in eval(expr, envir, enclos): object 'bbox' not found ggmap(terrain_map) #> Error in eval(expr, envir, enclos): object 'terrain_map' not found  lines_map <- get_stadiamap(bbox, zoom = 14, maptype = \"stamen_toner_lines\") #> Error in eval(expr, envir, enclos): object 'bbox' not found ggmap(lines_map) #> Error in eval(expr, envir, enclos): object 'lines_map' not found  ggmap(terrain_map) +   inset_ggmap(lines_map) #> Error in eval(expr, envir, enclos): object 'terrain_map' not found"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/legs2route.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a leg-structured route to a route-structured route — legs2route","title":"Convert a leg-structured route to a route-structured route — legs2route","text":"Convert leg-structured route route-structured route","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/legs2route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a leg-structured route to a route-structured route — legs2route","text":"","code":"legs2route(legsdf)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/legs2route.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a leg-structured route to a route-structured route — legs2route","text":"legsdf legs-structured route, see route()","code":""},{"path":[]},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/make_bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a bounding box — make_bbox","title":"Compute a bounding box — make_bbox","text":"Compute bounding box given longitude / latitude collection.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/make_bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a bounding box — make_bbox","text":"","code":"make_bbox(lon, lat, data, f = 0.05)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/make_bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a bounding box — make_bbox","text":"lon longitude lat latitude data (optional) data frame containing lon lat variables f number specifying fraction range extended. length 2 vector, applies longitude latitude.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/make_bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a bounding box — make_bbox","text":"","code":"make_bbox(lon, lat, data = crime) #> Error in eval(expr, envir, enclos): object 'crime' not found make_bbox(lon, lat, data = crime, f = .20) #> Error in eval(expr, envir, enclos): object 'crime' not found make_bbox(lon, lat, data = crime, f = c(.20, .05)) #> Error in eval(expr, envir, enclos): object 'crime' not found  (lon <- sample(crime$lon, 10)) #> Error in eval(expr, envir, enclos): object 'crime' not found (lat <- sample(crime$lat, 10)) #> Error in eval(expr, envir, enclos): object 'crime' not found make_bbox(lon, lat) #> Error in eval(expr, envir, enclos): object 'lon' not found make_bbox(lon, lat, f = .10) # bigger box #> Error in eval(expr, envir, enclos): object 'lon' not found"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/mapdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute map distances using Google — mapdist","title":"Compute map distances using Google — mapdist","text":"Compute map distances using Google's Distance Matrix API. Note: use Google's Distance Matrix API, must first enable API Google Cloud Platform Console. See register_google().","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/mapdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute map distances using Google — mapdist","text":"","code":"mapdist(   from,   to,   mode = c(\"driving\", \"walking\", \"bicycling\", \"transit\"),   output = c(\"simple\", \"all\"),   urlonly = FALSE,   override_limit = FALSE,   ext = \"com\",   inject = \"\",   ... )  distQueryCheck()"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/mapdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute map distances using Google — mapdist","text":"name origin addresses data frame (vector accepted), data frame columns name destination addresses data frame (vector accepted) mode driving, bicycling, walking, transit output amount output urlonly return url? override_limit override current query count (.google_distance_query_times) ext top level domain domain extension (e.g. \"com\", \"co.nz\") inject character string add url ... ...","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/mapdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute map distances using Google — mapdist","text":"data frame (output=\"simple\") geocoded information (output=\"\")","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/mapdist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute map distances using Google — mapdist","text":"parameters specified geographic coordinates, reverse geocoded revgeocode.  note google maps api limits 2500 element queries day.","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/mapdist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute map distances using Google — mapdist","text":"David Kahle david@kahle.io","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/print.ggmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a map — print.ggmap","title":"Print a map — print.ggmap","text":"Print console description map","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/print.ggmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a map — print.ggmap","text":"","code":"# S3 method for ggmap print(x, ...)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/print.ggmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a map — print.ggmap","text":"x object class elicit ... additional parameters","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/print.ggmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a map — print.ggmap","text":"Invisibly returns x.","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/qmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick map plot — qmap","title":"Quick map plot — qmap","text":"qmap wrapper ggmap() get_map().","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/qmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick map plot — qmap","text":"","code":"qmap(location = \"houston\", ...)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/qmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick map plot — qmap","text":"location character; location interest ... stuff pass ggmap() get_map()","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/qmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick map plot — qmap","text":"ggplot object","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/qmap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quick map plot — qmap","text":"David Kahle david@kahle.io","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/qmplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick map plot — qmplot","title":"Quick map plot — qmplot","text":"qmplot() ggmap equivalent ggplot2 function qplot allows quick plotting maps data/models/etc.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/qmplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick map plot — qmplot","text":"","code":"qmplot(   x,   y,   ...,   data,   zoom,   source = \"stadia\",   maptype = \"stamen_toner_lite\",   extent = \"device\",   legend = \"right\",   padding = 0.02,   force = FALSE,   darken = c(0, \"black\"),   mapcolor = \"color\",   facets = NULL,   margins = FALSE,   geom = \"auto\",   stat = list(NULL),   position = list(NULL),   xlim = c(NA, NA),   ylim = c(NA, NA),   main = NULL,   f = 0.05,   xlab = \"Longitude\",   ylab = \"Latitude\" )"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/qmplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick map plot — qmplot","text":"x longitude values y latitude values ... aesthetics passed layer data data frame use (optional).  specified, create one, extracting vectors current environment. zoom map zoom, see get_map() source map source, see get_map() maptype map type, see get_map() extent much plot map take ? \"normal\", \"panel\", \"device\" (default) legend \"left\", \"right\" (default), \"bottom\", \"top\", \"bottomleft\", \"bottomright\", \"topleft\", \"topright\", \"none\" (used extent = \"device\") padding distance legend corner plot  (used extent = \"device\") force force new map (use archived version) darken vector form c(number, color), number (0,1) color character string indicating color darken.  0 indicates darkening, 1 indicates black-. mapcolor color (\"color\") black--white (\"bw\") facets faceting formula use.  Picks facet_wrap() facet_grid() depending whether formula one sided two-sided margins whether margins displayed geom character vector specifying geom use.  defaults \"point\" stat character vector specifying statistics use position character vector giving position adjustment use xlim limits x axis ylim limits y axis main character vector expression plot title f number specifying fraction range extended xlab character vector expression x axis label ylab character vector expression y axis label","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/qmplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick map plot — qmplot","text":"","code":"if (FALSE)  # these are skipped to conserve R check time  qmplot(lon, lat, data = crime)   # only violent crimes violent_crimes <- subset(crime,   offense != \"auto theft\" &   offense != \"theft\" &   offense != \"burglary\" ) #> Error in eval(expr, envir, enclos): object 'crime' not found  # rank violent crimes violent_crimes$offense <- factor(   violent_crimes$offense,   levels = c(\"robbery\", \"aggravated assault\", \"rape\", \"murder\") ) #> Error in eval(expr, envir, enclos): object 'violent_crimes' not found  # restrict to downtown violent_crimes <- subset(violent_crimes,   -95.39681 <= lon & lon <= -95.34188 &    29.73631 <= lat & lat <=  29.78400 ) #> Error in eval(expr, envir, enclos): object 'violent_crimes' not found  theme_set(theme_bw())  qmplot(lon, lat, data = violent_crimes, colour = offense,   size = I(3.5), alpha = I(.6), legend = \"topleft\") #> Error in eval(expr, envir, enclos): object 'violent_crimes' not found  qmplot(lon, lat, data = violent_crimes, geom = c(\"point\",\"density2d\")) #> Error in eval(expr, envir, enclos): object 'violent_crimes' not found qmplot(lon, lat, data = violent_crimes) + facet_wrap(~ offense) #> Error in eval(expr, envir, enclos): object 'violent_crimes' not found qmplot(lon, lat, data = violent_crimes, extent = \"panel\") + facet_wrap(~ offense) #> Error in eval(expr, envir, enclos): object 'violent_crimes' not found qmplot(lon, lat, data = violent_crimes, extent = \"panel\", colour = offense, darken = .4) +   facet_wrap(~ month) #> Error in eval(expr, envir, enclos): object 'violent_crimes' not found     qmplot(long, lat, xend = long + delta_long,   color = I(\"red\"), yend = lat + delta_lat, data = seals,   geom = \"segment\", zoom = 5) #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors. #> Error in get_stamen_url(maptype = maptype, zoom = zoom, x = row[\"x\"],     y = row[\"y\"]): Stadia Maps requires an API key; see `ggmap::register_stadiamaps()`.  qmplot(long, lat, xend = long + delta_long, maptype = \"stamen_watercolor\",   yend = lat + delta_lat, data = seals,   geom = \"segment\", zoom = 6) #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors. #> ℹ 72 tiles needed, this may take a while (try a smaller zoom?) #> Error in get_stamen_url(maptype = maptype, zoom = zoom, x = row[\"x\"],     y = row[\"y\"]): Stadia Maps requires an API key; see `ggmap::register_stadiamaps()`.  qmplot(long, lat, xend = long + delta_long, maptype = \"stamen_terrain\",   yend = lat + delta_lat, data = seals,   geom = \"segment\", zoom = 6) #> ℹ © Stadia Maps © Stamen Design © OpenMapTiles © OpenStreetMap contributors. #> ℹ 72 tiles needed, this may take a while (try a smaller zoom?) #> Error in get_stamen_url(maptype = maptype, zoom = zoom, x = row[\"x\"],     y = row[\"y\"]): Stadia Maps requires an API key; see `ggmap::register_stadiamaps()`.   qmplot(lon, lat, data = wind, size = I(.5), alpha = I(.5)) +   ggtitle(\"NOAA Wind Report Sites\") #> Error in eval(expr, envir, enclos): object 'wind' not found  # thin down data set... s <- seq(1, 227, 8) thinwind <- subset(wind,   lon %in% unique(wind$lon)[s] &   lat %in% unique(wind$lat)[s] ) #> Error in eval(expr, envir, enclos): object 'wind' not found  # for some reason adding arrows to the following plot bugs theme_set(theme_bw(18))  qmplot(lon, lat, data = thinwind, geom = \"tile\", fill = spd, alpha = spd,     legend = \"bottomleft\") +   geom_leg(aes(xend = lon + delta_lon, yend = lat + delta_lat)) +   scale_fill_gradient2(\"Wind Speed\\nand\\nDirection\",     low = \"green\", mid = scales::muted(\"green\"), high = \"red\") +   scale_alpha(\"Wind Speed\\nand\\nDirection\", range = c(.1, .75)) +   guides(fill = guide_legend(), alpha = guide_legend()) #> Error in eval(expr, envir, enclos): object 'thinwind' not found     ## kriging ############################################################ # the below examples show kriging based on undeclared packages # to better comply with CRAN's standards, we remove it from # executing, but leave the code as a kind of case-study # they also require the rgdal library   library(lattice) library(sp) #> Error in library(sp): there is no package called ‘sp’ library(rgdal) #> Error in library(rgdal): there is no package called ‘rgdal’  # load in and format the meuse dataset (see bivand, pebesma, and gomez-rubio) data(meuse) #> Warning: data set ‘meuse’ not found coordinates(meuse) <- c(\"x\", \"y\") #> Error: object 'meuse' not found proj4string(meuse) <- CRS(\"+init=epsg:28992\") #> Error in CRS(\"+init=epsg:28992\"): could not find function \"CRS\" meuse <- spTransform(meuse, CRS(\"+proj=longlat +datum=WGS84\")) #> Error in spTransform(meuse, CRS(\"+proj=longlat +datum=WGS84\")): could not find function \"spTransform\"  # plot plot(meuse) #> Error in eval(expr, envir, enclos): object 'meuse' not found  m <- data.frame(slot(meuse, \"coords\"), slot(meuse, \"data\")) #> Error in eval(expr, envir, enclos): object 'meuse' not found names(m)[1:2] <- c(\"lon\", \"lat\") #> Error: object 'm' not found  qmplot(lon, lat, data = m) #> Error in eval(expr, envir, enclos): object 'm' not found qmplot(lon, lat, data = m, zoom = 14) #> Error in eval(expr, envir, enclos): object 'm' not found   qmplot(lon, lat, data = m, size = zinc,   zoom = 14, source = \"google\", maptype = \"satellite\",   alpha = I(.75), color = I(\"green\"),   legend = \"topleft\", darken = .2 ) + scale_size(\"Zinc (ppm)\") #> Error in eval(expr, envir, enclos): object 'm' not found         # load in the meuse.grid dataset (looking toward kriging) library(gstat) #> Error in library(gstat): there is no package called ‘gstat’ data(meuse.grid) #> Warning: data set ‘meuse.grid’ not found coordinates(meuse.grid) <- c(\"x\", \"y\") #> Error: object 'meuse.grid' not found proj4string(meuse.grid) <- CRS(\"+init=epsg:28992\") #> Error in CRS(\"+init=epsg:28992\"): could not find function \"CRS\" meuse.grid <- spTransform(meuse.grid, CRS(\"+proj=longlat +datum=WGS84\")) #> Error in spTransform(meuse.grid, CRS(\"+proj=longlat +datum=WGS84\")): could not find function \"spTransform\"  # plot it plot(meuse.grid) #> Error in eval(expr, envir, enclos): object 'meuse.grid' not found  mg <- data.frame(slot(meuse.grid, \"coords\"), slot(meuse.grid, \"data\")) #> Error in eval(expr, envir, enclos): object 'meuse.grid' not found names(mg)[1:2] <- c(\"lon\", \"lat\") #> Error: object 'mg' not found  qmplot(lon, lat, data = mg, shape = I(15), zoom = 14, legend = \"topleft\") +   geom_point(aes(size = zinc), data = m, color = \"green\") +   scale_size(\"Zinc (ppm)\") #> Error in eval(expr, envir, enclos): object 'mg' not found    # interpolate at unobserved locations (i.e. at meuse.grid points) # pre-define scale for consistency scale <- scale_color_gradient(\"Predicted\\nZinc (ppm)\",   low = \"green\", high = \"red\", lim = c(100, 1850) )    # inverse distance weighting idw <- idw(log(zinc) ~ 1, meuse, meuse.grid, idp = 2.5) #> Error in idw(log(zinc) ~ 1, meuse, meuse.grid, idp = 2.5): could not find function \"idw\" mg$idw <- exp(slot(idw, \"data\")$var1.pred) #> Error in eval(expr, envir, enclos): object 'idw' not found  qmplot(lon, lat, data = mg, shape = I(15), color = idw,   zoom = 14, legend = \"topleft\", alpha = I(.75), darken = .4 ) + scale #> Error in eval(expr, envir, enclos): object 'mg' not found    # linear regression lin <- krige(log(zinc) ~ 1, meuse, meuse.grid, degree = 1) #> Error in krige(log(zinc) ~ 1, meuse, meuse.grid, degree = 1): could not find function \"krige\" mg$lin <- exp(slot(lin, \"data\")$var1.pred) #> Error in eval(expr, envir, enclos): object 'lin' not found  qmplot(lon, lat, data = mg, shape = I(15), color = lin,   zoom = 14, legend = \"topleft\", alpha = I(.75), darken = .4 ) + scale #> Error in eval(expr, envir, enclos): object 'mg' not found    # trend surface analysis tsa <- krige(log(zinc) ~ 1, meuse, meuse.grid, degree = 2) #> Error in krige(log(zinc) ~ 1, meuse, meuse.grid, degree = 2): could not find function \"krige\" mg$tsa <- exp(slot(tsa, \"data\")$var1.pred) #> Error in eval(expr, envir, enclos): object 'tsa' not found  qmplot(lon, lat, data = mg, shape = I(15), color = tsa,   zoom = 14, legend = \"topleft\", alpha = I(.75), darken = .4 ) + scale #> Error in eval(expr, envir, enclos): object 'mg' not found    # ordinary kriging vgram <- variogram(log(zinc) ~ 1, meuse)   # plot(vgram) #> Error in variogram(log(zinc) ~ 1, meuse): could not find function \"variogram\" vgramFit <- fit.variogram(vgram, vgm(1, \"Exp\", .2, .1)) #> Error in fit.variogram(vgram, vgm(1, \"Exp\", 0.2, 0.1)): could not find function \"fit.variogram\" ordKrige <- krige(log(zinc) ~ 1, meuse, meuse.grid, vgramFit) #> Error in krige(log(zinc) ~ 1, meuse, meuse.grid, vgramFit): could not find function \"krige\" mg$ordKrige <- exp(slot(ordKrige, \"data\")$var1.pred) #> Error in eval(expr, envir, enclos): object 'ordKrige' not found  qmplot(lon, lat, data = mg, shape = I(15), color = ordKrige,   zoom = 14, legend = \"topleft\", alpha = I(.75), darken = .4 ) + scale #> Error in eval(expr, envir, enclos): object 'mg' not found    # universal kriging vgram <- variogram(log(zinc) ~ 1, meuse) # plot(vgram) #> Error in variogram(log(zinc) ~ 1, meuse): could not find function \"variogram\" vgramFit <- fit.variogram(vgram, vgm(1, \"Exp\", .2, .1)) #> Error in fit.variogram(vgram, vgm(1, \"Exp\", 0.2, 0.1)): could not find function \"fit.variogram\" univKrige <- krige(log(zinc) ~ sqrt(dist), meuse, meuse.grid, vgramFit) #> Error in krige(log(zinc) ~ sqrt(dist), meuse, meuse.grid, vgramFit): could not find function \"krige\" mg$univKrige <- exp(slot(univKrige, \"data\")$var1.pred) #> Error in eval(expr, envir, enclos): object 'univKrige' not found  qmplot(lon, lat, data = mg, shape = I(15), color = univKrige,   zoom = 14, legend = \"topleft\", alpha = I(.75), darken = .4 ) + scale #> Error in eval(expr, envir, enclos): object 'mg' not found    # adding observed data layer qmplot(lon, lat, data = mg, shape = I(15), color = univKrige,   zoom = 14, legend = \"topleft\", alpha = I(.75), darken = .4 ) +   geom_point(     aes(x = lon, y = lat, size = zinc),     data = m, shape = 1, color = \"black\"   ) +   scale +   scale_size(\"Observed\\nLog Zinc\") #> Error in eval(expr, envir, enclos): object 'mg' not found        # end dontrun"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>%","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/register_google.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a Google API — register_google","title":"Register a Google API — register_google","text":"page contains documentation tools related enabling Google services R. See Details section file background information.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/register_google.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a Google API — register_google","text":"","code":"showing_key()  ggmap_show_api_key()  ggmap_hide_api_key()  scrub_key(string, with = \"xxx\")  register_google(   key,   account_type,   client,   signature,   second_limit,   day_limit,   write = FALSE )  # S3 method for google_credentials print(x, ...)  google_key()  has_google_key()  has_google_account()  google_account()  google_client()  has_google_client()  google_signature()  has_google_signature()  google_second_limit()  google_day_limit()"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/register_google.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a Google API — register_google","text":"string url string scrubbed. currently key, signature, client keywords scrubbed url replace argument string replace key api key account_type \"standard\" \"premium\" client client code signature signature code second_limit query limit per second (default 50) day_limit query limit per day (default 2500 standard accounts, 100000 premium accounts) write TRUE, stores secrets provided .Renviron file x google credentials class object ... dumped formal argument generic print method","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/register_google.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a Google API — register_google","text":"mid-2018, Google Maps Platform requires registered API key. alleviates previous burdens (e.g. query limits), creates challenges well. immediate challenge R users ggmap functions use Google's services longer function box, since user setup account Google, enable relevant APIs, tell R user's setup. obtain API key enable services, go https://mapsplatform.google.com/. documentation shows input requisite information (e.g. API key) R, also shows tools can help work credentialing. tell ggmap API key, use register_google(), e.g. register_google(key = \"mQkzTpiaLYjPqXQBotesgif3EfGL2dbrNVOrogg\") (fake key). set API key current session, restart R, need . can set permanently setting write = TRUE, see examples. set permanently stored .Renviron file, accessed ggmap persistently across sessions. Users aware API key, string jarbled characters/numbers/symbols, PRIVATE key - uniquely identifies authenticates Google's services. anyone gets API key, can use masquerade Google potentially use services enabled. Since Google requires valid credit card use online cloud services, also means anyone obtains key can potentially make charges card form Google services. sure share API key. mitigate users inadvertently sharing keys, default ggmap never displays user's key messages displayed console. Users also aware ggmap mechanism safeguard private key registered R. say, register API key, function R access . consequence, ggmap know another function, potentially compromised package, accesses key uploads third party. reason, using ggmap recommend heightened sense security self-awareness: use trusted packages, save API keys script files, routinely cycle keys (regenerate new keys retire old ones), etc. Google offers features help securing API key, including things like limiting queries using key particular IP address, well guidance security best practices. See https://cloud.google.com/docs/authentication/api-keys#securing_an_api_key details.","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/register_google.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Register a Google API — register_google","text":"David Kahle david@kahle.io","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/register_google.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a Google API — register_google","text":"","code":"# this sets your google map for this session # register_google(key = \"[your key]\")  # this sets your google map permanently # register_google(key = \"[your key]\", write = TRUE)  has_google_key() #> [1] FALSE google_key() #> [1] NA has_google_client() #> [1] FALSE has_google_signature() #> [1] FALSE  geocode(\"waco, texas\", urlonly = TRUE) #> [1] \"https://maps.googleapis.com/maps/api/geocode/json?address=waco,+texas\" ggmap_show_api_key() #> ! ggmap will now display PRIVATE api keys in the console. geocode(\"waco, texas\", urlonly = TRUE) #> [1] \"https://maps.googleapis.com/maps/api/geocode/json?address=waco,+texas\" ggmap_hide_api_key() #> ℹ ggmap will now suppress private api keys in the console. geocode(\"waco, texas\", urlonly = TRUE) #> [1] \"https://maps.googleapis.com/maps/api/geocode/json?address=waco,+texas\"  scrub_key(\"key=d_5iD\") #> [1] \"key=xxx\" scrub_key(\"key=d_5iD\", \"[your \\\\1]\") #> [1] \"key=[your key]\" scrub_key(\"signature=d_5iD\") #> [1] \"signature=xxx\" scrub_key(\"client=a_5sS&signature=d_5iD\") #> [1] \"client=xxx&signature=xxx\""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/register_stadiamaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a Stadia Maps API Key — register_stadiamaps","title":"Register a Stadia Maps API Key — register_stadiamaps","text":"page contains documentation tools related enabling Stadia Maps services R. See Details section file background information.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/register_stadiamaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a Stadia Maps API Key — register_stadiamaps","text":"","code":"register_stadiamaps(key, write = FALSE)  stadiamaps_key()  has_stadiamaps_key()"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/register_stadiamaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a Stadia Maps API Key — register_stadiamaps","text":"key api key write TRUE, stores secrets provided .Renviron file","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/register_stadiamaps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a Stadia Maps API Key — register_stadiamaps","text":"obtain API key enable services, go https://client.stadiamaps.com/signup/. completely free non-commercial evaluation use (license commercial use; see https://stadiamaps.com/pricing pricing), credit card required sign . tell ggmap API key, use register_stadiamaps(), e.g. register_stadiamaps(key = \"-API-KEY\") (fake key). set API key current session, restart R, need . can set permanently setting write = TRUE, see examples. set permanently stored .Renviron file, accessed ggmap persistently across sessions. Users aware API key, PRIVATE key - uniquely identifies authenticates Stadia Maps' services. anyone gets API key, can use masquerade Stadia Maps potentially use services enabled. Stadia Maps requires opt additional usage-based billing, also means anyone obtains key can potentially incur charges behalf steal quota already purchased. sure share API key. mitigate users inadvertently sharing keys, default ggmap never displays user's key messages displayed console. Users also aware ggmap mechanism safeguard private key registered R. say, register API key, function R access . consequence, ggmap know another function, potentially compromised package, accesses key uploads third party. reason, using ggmap recommend heightened sense security self-awareness: use trusted packages, save API keys script files, routinely cycle keys (regenerate new keys retire old ones), etc.","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/register_stadiamaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a Stadia Maps API Key — register_stadiamaps","text":"","code":"# this sets your Stadia Maps API key for this session # register_stadiamaps(key = \"YOUR-API-KEY\")  # this sets your Stadia Maps API key permanently # register_stadiamaps(key = \"YOUR-API-KEY\", write = TRUE)  has_stadiamaps_key() #> [1] FALSE stadiamaps_key() #> [1] NA"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/revgeocode.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse geocode — revgeocode","title":"Reverse geocode — revgeocode","text":"Reverse geocodes (looks address ) longitude/latitude location using Google Geocoding API. Note: use Google's Geocoding API, must first enable API Google Cloud Platform Console. See register_google().","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/revgeocode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse geocode — revgeocode","text":"","code":"revgeocode(   location,   output = c(\"address\", \"all\"),   force = FALSE,   urlonly = FALSE,   override_limit = FALSE,   ext = \"com\",   inject = \"\",   ... )"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/revgeocode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse geocode — revgeocode","text":"location location longitude/latitude format output \"address\" \"\" force force online query, even cached (previously downloaded) urlonly return url? override_limit override current query rate ext top level domain extension (e.g. \"com\", \"co.nz\") inject character string add url ... ...","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/revgeocode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse geocode — revgeocode","text":"character(1) address list (parsed json output Google)","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/revgeocode.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reverse geocode — revgeocode","text":"David Kahle david@kahle.io","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/route.html","id":null,"dir":"Reference","previous_headings":"","what":"Grab a route from Google — route","title":"Grab a route from Google — route","text":"Route two locations: determine sequence steps (legs) two locations using Google Directions API. Note: use Google's Directions API, must first enable API Google Cloud Platform Console. See register_google().","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/route.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grab a route from Google — route","text":"","code":"route(   from,   to,   mode = c(\"driving\", \"walking\", \"bicycling\", \"transit\"),   structure = c(\"legs\", \"route\"),   output = c(\"simple\", \"all\"),   alternatives = FALSE,   units = \"metric\",   urlonly = FALSE,   override_limit = FALSE,   ext = \"com\",   inject = \"\",   ... )  routeQueryCheck()"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/route.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grab a route from Google — route","text":"vector origin addresses vector destination addresses mode driving, bicycling, walking, transit structure structure output, \"legs\" \"route\", see examples output amount output (\"simple\" \"\") alternatives one route provided? units \"metric\" urlonly return url? override_limit override current query count ext domain extension (e.g. \"com\", \"co.nz\") inject character string add url ... ...","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/route.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grab a route from Google — route","text":"data frame (output=\"simple\") geocoded information (output=\"\")","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/route.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Grab a route from Google — route","text":"David Kahle david@kahle.io","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/theme_inset.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a ggplot2 inset theme. — theme_inset","title":"Make a ggplot2 inset theme. — theme_inset","text":"theme_inset ggplot2 theme geared towards making inset plots.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/theme_inset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a ggplot2 inset theme. — theme_inset","text":"","code":"theme_inset(base_size = 12)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/theme_inset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a ggplot2 inset theme. — theme_inset","text":"base_size base size, used.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/theme_inset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a ggplot2 inset theme. — theme_inset","text":"ggplot2 theme (.e., list class options).","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/theme_inset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a ggplot2 inset theme. — theme_inset","text":"David Kahle david@kahle.io","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/theme_inset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a ggplot2 inset theme. — theme_inset","text":"","code":"library(ggplot2) if (FALSE) {   n <- 50 df <- expand.grid(x = 1:n,y = 1:n)[sample(n^2,.5*n^2),] qplot(x, y, data = df, geom = 'tile') qplot(x, y, data = df, geom = 'tile') + theme_nothing()  qplot(1:10, 1:10) +   annotation_custom(     grob = ggplotGrob(qplot(1:10,1:10)),     8, Inf, -Inf, 2   )  qplot(1:10, 1:10) +   annotation_custom(     grob = ggplotGrob(qplot(1:10,1:10) + theme_nothing()),     8, Inf, -Inf, 2   )  qplot(1:10, 1:10) +   annotation_custom(     grob = ggplotGrob(qplot(1:10,1:10) + theme_inset()),     8, Inf, -Inf, 2   )  }"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/theme_nothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a blank ggplot2 theme. — theme_nothing","title":"Make a blank ggplot2 theme. — theme_nothing","text":"theme_nothing simply strips thematic element ggplot2.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/theme_nothing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a blank ggplot2 theme. — theme_nothing","text":"","code":"theme_nothing(base_size = 12, legend = FALSE)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/theme_nothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a blank ggplot2 theme. — theme_nothing","text":"base_size base size, used. legend legend included?","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/theme_nothing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a blank ggplot2 theme. — theme_nothing","text":"ggplot2 theme (.e., list class options).","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/theme_nothing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a blank ggplot2 theme. — theme_nothing","text":"David Kahle david@kahle.io","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/theme_nothing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a blank ggplot2 theme. — theme_nothing","text":"","code":"# no legend example n <- 50 df <- expand.grid(x = 1:n,y = 1:n)[sample(n^2,.5*n^2),] p <- ggplot(df, aes(x, y)) + geom_raster() p  p + theme_nothing()  p + theme_nothing(legend = TRUE) # no difference  p +   scale_x_continuous(expand = c(0,0)) +   scale_y_continuous(expand = c(0,0)) +   theme_nothing()     # legend example df$class <- factor(sample(0:1, .5*n^2,  replace = TRUE)) p <- ggplot(df, aes(x, y)) + geom_raster(aes(fill = class)) p  p + theme_nothing()  p + theme_nothing(legend = TRUE)   p <- p +   scale_x_continuous(expand = c(0,0)) +   scale_y_continuous(expand = c(0,0)) p  p + theme_nothing()  p + theme_nothing(legend = TRUE)"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/trek.html","id":null,"dir":"Reference","previous_headings":"","what":"Grab a trek from Google — trek","title":"Grab a trek from Google — trek","text":"Sequence treks (latitude-longitude sequences following ordinary paths, e.g. roads) two locations using Google Directions API. Note: use Google's Directions API, must first enable API Google Cloud Platform Console. See register_google().","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/trek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grab a trek from Google — trek","text":"","code":"trek(   from,   to,   mode = c(\"driving\", \"walking\", \"bicycling\", \"transit\"),   output = c(\"simple\", \"all\"),   alternatives = FALSE,   units = \"metric\",   urlonly = FALSE,   override_limit = FALSE,   ext = \"com\",   inject = \"\",   ... )"},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/trek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grab a trek from Google — trek","text":"name origin addresses data frame name destination addresses data frame mode driving, bicycling, walking, transit output amount output (\"simple\" \"\") alternatives one route provided? units \"metric\" urlonly return url? override_limit override current query count ext domain extension (e.g. \"com\", \"co.nz\") inject character string add url ... ...","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/trek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grab a trek from Google — trek","text":"tibble","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/trek.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Grab a trek from Google — trek","text":"David Kahle david@kahle.io key decoding algorithm due Stack Overflow user akhmed","code":""},{"path":[]},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/wind.html","id":null,"dir":"Reference","previous_headings":"","what":"Wind data from Hurricane Ike — wind","title":"Wind data from Hurricane Ike — wind","text":"Wind data Hurricane Ike","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/wind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wind data from Hurricane Ike — wind","text":"Powell, M. D., S. H. Houston, L. R. Amat, N Morisseau-Leroy, 1998: HRD real-time hurricane wind analysis system. J. Wind Engineer. Indust. Aerodyn. 77&78, 53-64","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/wind.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Wind data from Hurricane Ike — wind","text":"https://www.aoml.noaa.gov/hrd/Storm_pages/ike2008/wind.html","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/wind.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wind data from Hurricane Ike — wind","text":"Atlantic Oceanographic Meteorological Laboratory (AOML), division National Oceanic Atmospheric Administration (NOAA)","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/zips.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip code data for the Greater Houston Metropolitan Area from the\n2000 census — zips","title":"Zip code data for the Greater Houston Metropolitan Area from the\n2000 census — zips","text":"Zip code data Greater Houston Metropolitan Area 2000 census","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/zips.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Zip code data for the Greater Houston Metropolitan Area from the\n2000 census — zips","text":"Downloaded http://www.census.gov/geo/www/cob/z52000.html (now defunct).","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/reference/zips.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Zip code data for the Greater Houston Metropolitan Area from the\n2000 census — zips","text":"U.S. Census Bureau, Geography Division, Cartographic Products Management Branch","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/news/index.html","id":"ggmap-400","dir":"Changelog","previous_headings":"","what":"ggmap 4.0.0","title":"ggmap 4.0.0","text":"CRAN release: 2023-11-19","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/news/index.html","id":"new-features-4-0-0","dir":"Changelog","previous_headings":"","what":"New features","title":"ggmap 4.0.0","text":"Adds support styles Stadia Maps via get_stadiamap() (thanks @ianthetechie, #351).","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/news/index.html","id":"changes-4-0-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"ggmap 4.0.0","text":"Stamen map tiles now hosted Stadia Maps (see http://maps.stamen.com/stadia-partnership/), necessitates breaking changes ggmap. existing URLs expected shut October 31, 2023. release renames Stamen-related functions Stadia equivalents (ex: get_stamenmap() now get_stadiamap()). Developers also need make minor changes style names include stamen_ prefix convert names snake_case. example toner-lite becomes stamen_toner_lite. Removes toner hybrid layer group, well deprecated styles wide use. Stamen’s Toner Hybrid can recreated layering lines labels top . Adds styles Stadia Maps: Alidade Smooth (light dark) Outdoors. ggmap longer depends RgoogleMaps (thanks @sanjmeh, #354).","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/news/index.html","id":"ggmap-302","dir":"Changelog","previous_headings":"","what":"ggmap 3.0.2","title":"ggmap 3.0.2","text":"CRAN release: 2023-03-14","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/news/index.html","id":"changes-3-0-2","dir":"Changelog","previous_headings":"","what":"Changes","title":"ggmap 3.0.2","text":"Startup messages can now suppressed","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/news/index.html","id":"ggmap-301","dir":"Changelog","previous_headings":"","what":"ggmap 3.0.1","title":"ggmap 3.0.1","text":"CRAN release: 2022-11-03","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/news/index.html","id":"new-features-3-0-1","dir":"Changelog","previous_headings":"","what":"New features","title":"ggmap 3.0.1","text":"geocode_cache() now exported user, functions write_geocode_cache() write_geocode_cache() exist facilitate using cache across sessions.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/news/index.html","id":"changes-3-0-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"ggmap 3.0.1","text":"ggmap longer depends rjson (thanks @MichaelChirico, #317). functions now use cli-based messaging functions, following ggplot2’s lead.","code":""},{"path":"https://jhu-statprogramming-fall-2023.github.io/biostat777-project3-part1-nsifnugel/news/index.html","id":"minor-improvements-and-fixes-3-0-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"ggmap 3.0.1","text":"ggmap functions can now called even attached search path (loaded) (reported @jennybc, @lorenzwalthert, #264, #244). Google functions now properly encode #’s (reported @aaronrudkin, #272). get_stamenmap() now returns URLs messaging = TRUE (Reported @ikosmidis, #274). also includes formal attribution Stamen Design OpenStreetMap. get_stamenmap() now supports SSL Stamen endpoint via https argument (#276). mapdist() now properly orders results (reported @BirgerNi, #266). mapdist() now properly returns URLs urlonly = TRUE. get_map() now () respects source = \"google\" specification given bounding box (reported @julovi, #267). geocode() now () respects source = \"dsk\" specification (reported @alistaire47, #180). bug giving error message Error aperm.default(map, c(2, 1, 3)) : invalid first argument, must array now fixed. (solution @kent37, #262). geocode() now properly caches geocoding several locations. caching keys now hash values scrubbed url.","code":""}]
